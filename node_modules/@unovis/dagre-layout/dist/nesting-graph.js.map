{"version":3,"file":"nesting-graph.js","sources":["../lib/nesting-graph.js"],"sourcesContent":["import _reduce from 'lodash-es/reduce'\nimport _forEach from 'lodash-es/forEach'\nimport _values from 'lodash-es/values'\nimport _max from 'lodash-es/max'\nimport util from './util'\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\n\nfunction run (g) {\n  const root = util.addDummyNode(g, 'root', {}, '_root')\n  const depths = treeDepths(g)\n  const height = _max(_values(depths)) - 1\n  const nodeSep = 2 * height + 1\n  g.graph().nestingRoot = root // Multiply minlen by nodeSep to align nodes on non-border ranks.\n\n  _forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep\n  }) // Calculate a weight that is sufficient to keep subgraphs vertically compact\n\n  const weight = sumWeights(g) + 1 // Create border nodes and link them up\n\n  _forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child)\n  }) // Save the multiplier for node layers for later removal of empty border\n  // layers.\n\n  g.graph().nodeRankFactor = nodeSep\n}\n\nfunction dfs (g, root, nodeSep, weight, height, depths, v) {\n  const children = g.children(v)\n\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, {\n        weight: 0,\n        minlen: nodeSep\n      })\n    }\n\n    return\n  }\n\n  const top = util.addBorderNode(g, '_bt')\n  const bottom = util.addBorderNode(g, '_bb')\n  const label = g.node(v)\n  g.setParent(top, v)\n  label.borderTop = top\n  g.setParent(bottom, v)\n  label.borderBottom = bottom\n\n  _forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child)\n    const childNode = g.node(child)\n    const childTop = childNode.borderTop ? childNode.borderTop : child\n    const childBottom = childNode.borderBottom ? childNode.borderBottom : child\n    const thisWeight = childNode.borderTop ? weight : 2 * weight\n    const minlen = childTop !== childBottom ? 1 : height - depths[v] + 1\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    })\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    })\n  })\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, {\n      weight: 0,\n      minlen: height + depths[v]\n    })\n  }\n}\n\nfunction treeDepths (g) {\n  const depths = {}\n\n  function dfs (v, depth) {\n    const children = g.children(v)\n\n    if (children && children.length) {\n      _forEach(children, function (child) {\n        dfs(child, depth + 1)\n      })\n    }\n\n    depths[v] = depth\n  }\n\n  _forEach(g.children(), function (v) {\n    dfs(v, 1)\n  })\n\n  return depths\n}\n\nfunction sumWeights (g) {\n  return _reduce(g.edges(), function (acc, e) {\n    return acc + g.edge(e).weight\n  }, 0)\n}\n\nfunction cleanup (g) {\n  const graphLabel = g.graph()\n  g.removeNode(graphLabel.nestingRoot)\n  delete graphLabel.nestingRoot\n\n  _forEach(g.edges(), function (e) {\n    const edge = g.edge(e)\n\n    if (edge.nestingEdge) {\n      g.removeEdge(e)\n    }\n  })\n}\n\nexport default {\n  run,\n  cleanup\n}\n"],"names":[],"mappings":"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"}