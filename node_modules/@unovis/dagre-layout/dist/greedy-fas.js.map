{"version":3,"file":"greedy-fas.js","sources":["../lib/greedy-fas.js"],"sourcesContent":["import _range from 'lodash-es/range'\nimport _forEach from 'lodash-es/forEach'\nimport _map from 'lodash-es/map'\nimport _flatten from 'lodash-es/flatten'\nimport _constant from 'lodash-es/constant'\nimport { Graph } from '@unovis/graphlibrary'\nimport List from './data/list'\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\n\nconst DEFAULT_WEIGHT_FN = _constant(1)\n\nfunction greedyFAS (g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return []\n  }\n\n  const state = buildState(g, weightFn || DEFAULT_WEIGHT_FN)\n  const results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx) // Expand multi-edges\n\n  return _flatten(_map(results, function (e) {\n    return g.outEdges(e.v, e.w)\n  }), true)\n}\n\nfunction doGreedyFAS (g, buckets, zeroIdx) {\n  let results = []\n  const sources = buckets[buckets.length - 1]\n  const sinks = buckets[0]\n  let entry\n\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry)\n    }\n\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry)\n    }\n\n    if (g.nodeCount()) {\n      for (let i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue()\n\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true))\n          break\n        }\n      }\n    }\n  }\n\n  return results\n}\n\nfunction removeNode (g, buckets, zeroIdx, entry, collectPredecessors) {\n  const results = collectPredecessors ? [] : undefined\n\n  _forEach(g.inEdges(entry.v), function (edge) {\n    const weight = g.edge(edge)\n    const uEntry = g.node(edge.v)\n\n    if (collectPredecessors) {\n      results.push({\n        v: edge.v,\n        w: edge.w\n      })\n    }\n\n    uEntry.out -= weight\n    assignBucket(buckets, zeroIdx, uEntry)\n  })\n\n  _forEach(g.outEdges(entry.v), function (edge) {\n    const weight = g.edge(edge)\n    const w = edge.w\n    const wEntry = g.node(w)\n    wEntry['in'] -= weight\n    assignBucket(buckets, zeroIdx, wEntry)\n  })\n\n  g.removeNode(entry.v)\n  return results\n}\n\nfunction buildState (g, weightFn) {\n  const fasGraph = new Graph()\n  let maxIn = 0\n  let maxOut = 0\n\n  _forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, {\n      v: v,\n      'in': 0,\n      out: 0\n    })\n  }) // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n\n  _forEach(g.edges(), function (e) {\n    const prevWeight = fasGraph.edge(e.v, e.w) || 0\n    const weight = weightFn(e)\n    const edgeWeight = prevWeight + weight\n    fasGraph.setEdge(e.v, e.w, edgeWeight)\n    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight)\n    maxIn = Math.max(maxIn, fasGraph.node(e.w)['in'] += weight)\n  })\n\n  const buckets = _range(maxOut + maxIn + 3).map(function () {\n    return new List()\n  })\n\n  const zeroIdx = maxIn + 1\n\n  _forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v))\n  })\n\n  return {\n    graph: fasGraph,\n    buckets: buckets,\n    zeroIdx: zeroIdx\n  }\n}\n\nfunction assignBucket (buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry)\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry)\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry)\n  }\n}\n\nexport default greedyFAS\n"],"names":[],"mappings":"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"}