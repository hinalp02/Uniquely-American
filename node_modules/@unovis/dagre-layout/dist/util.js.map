{"version":3,"file":"util.js","sources":["../lib/util.js"],"sourcesContent":["import _now from 'lodash-es/now'\nimport _max from 'lodash-es/max'\nimport _has from 'lodash-es/has'\nimport _min from 'lodash-es/min'\nimport _isUndefined from 'lodash-es/isUndefined'\nimport _range from 'lodash-es/range'\nimport _zipObject from 'lodash-es/zipObject'\nimport _map from 'lodash-es/map'\nimport _forEach from 'lodash-es/forEach'\nimport _uniqueId from 'lodash-es/uniqueId'\nimport { Graph } from '@unovis/graphlibrary'\n/*\n * Adds a dummy node to the graph and return v.\n */\n\nexport function addDummyNode (g, type, attrs, name) {\n  let v\n\n  do {\n    v = _uniqueId(name)\n  } while (g.hasNode(v))\n\n  attrs.dummy = type\n  g.setNode(v, attrs)\n  return v\n}\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\n\nexport function simplify (g) {\n  const simplified = new Graph().setGraph(g.graph())\n\n  _forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v))\n  })\n\n  _forEach(g.edges(), function (e) {\n    const simpleLabel = simplified.edge(e.v, e.w) || {\n      weight: 0,\n      minlen: 1\n    }\n    const label = g.edge(e)\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen)\n    })\n  })\n\n  return simplified\n}\nexport function asNonCompoundGraph (g) {\n  const simplified = new Graph({\n    multigraph: g.isMultigraph()\n  }).setGraph(g.graph())\n\n  _forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v))\n    }\n  })\n\n  _forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e))\n  })\n\n  return simplified\n}\nexport function successorWeights (g) {\n  const weightMap = _map(g.nodes(), function (v) {\n    const sucs = {}\n\n    _forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight\n    })\n\n    return sucs\n  })\n\n  return _zipObject(g.nodes(), weightMap)\n}\nexport function predecessorWeights (g) {\n  const weightMap = _map(g.nodes(), function (v) {\n    const preds = {}\n\n    _forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight\n    })\n\n    return preds\n  })\n\n  return _zipObject(g.nodes(), weightMap)\n}\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\n\nexport function intersectRect (rect, point) {\n  const x = rect.x\n  const y = rect.y // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n\n  const dx = point.x - x\n  const dy = point.y - y\n  let w = rect.width / 2\n  let h = rect.height / 2\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle')\n  }\n\n  let sx\n  let sy\n\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h\n    }\n\n    sx = h * dx / dy\n    sy = h\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w\n    }\n\n    sx = w\n    sy = w * dy / dx\n  }\n\n  return {\n    x: x + sx,\n    y: y + sy\n  }\n}\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\n\nexport function buildLayerMatrix (g) {\n  const layering = _map(_range(maxRank(g) + 1), function () {\n    return []\n  })\n\n  _forEach(g.nodes(), function (v) {\n    const node = g.node(v)\n    const rank = node.rank\n\n    if (!_isUndefined(rank)) {\n      layering[rank][node.order] = v\n    }\n  })\n\n  return layering\n}\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\n\nexport function normalizeRanks (g) {\n  const min = _min(_map(g.nodes(), function (v) {\n    return g.node(v).rank\n  }))\n\n  _forEach(g.nodes(), function (v) {\n    const node = g.node(v)\n\n    if (_has(node, 'rank')) {\n      node.rank -= min\n    }\n  })\n}\nexport function removeEmptyRanks (g) {\n  // Ranks may not start at 0, so we need to offset them\n  const offset = _min(_map(g.nodes(), function (v) {\n    return g.node(v).rank\n  }))\n\n  const layers = []\n\n  _forEach(g.nodes(), function (v) {\n    const rank = g.node(v).rank - offset\n\n    if (!layers[rank]) {\n      layers[rank] = []\n    }\n\n    layers[rank].push(v)\n  })\n\n  let delta = 0\n  const nodeRankFactor = g.graph().nodeRankFactor\n\n  _forEach(layers, function (vs, i) {\n    if (_isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta\n    } else if (delta) {\n      _forEach(vs, function (v) {\n        g.node(v).rank += delta\n      })\n    }\n  })\n}\nexport function addBorderNode (g, prefix, rank, order) {\n  const node = {\n    width: 0,\n    height: 0\n  }\n\n  if (arguments.length >= 4) {\n    node.rank = rank\n    node.order = order\n  }\n\n  return addDummyNode(g, 'border', node, prefix)\n}\nexport function maxRank (g) {\n  return _max(_map(g.nodes(), function (v) {\n    const rank = g.node(v).rank\n\n    if (!_isUndefined(rank)) {\n      return rank\n    }\n  }))\n}\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\n\nexport function partition (collection, fn) {\n  const result = {\n    lhs: [],\n    rhs: []\n  }\n\n  _forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value)\n    } else {\n      result.rhs.push(value)\n    }\n  })\n\n  return result\n}\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\n\nexport function time (name, fn) {\n  const start = _now()\n\n  try {\n    return fn()\n  } finally {\n    console.log(name + ' time: ' + (_now() - start) + 'ms')\n  }\n}\nexport function notime (name, fn) {\n  return fn()\n}\nexport default {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime\n}\n"],"names":[],"mappings":"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"}