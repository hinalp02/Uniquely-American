{"version":3,"file":"feasible-tree.js","sources":["../../lib/rank/feasible-tree.js"],"sourcesContent":["import _minBy from 'lodash-es/minBy'\nimport _forEach from 'lodash-es/forEach'\nimport { Graph } from '@unovis/graphlibrary'\nimport { slack } from './util'\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\n\nfunction feasibleTree (g) {\n  const t = new Graph({\n    directed: false\n  }) // Choose arbitrary node from which to start our tree\n\n  const start = g.nodes()[0]\n  const size = g.nodeCount()\n  t.setNode(start, {})\n  let edge\n  let delta\n\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g)\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge)\n    shiftRanks(t, g, delta)\n  }\n\n  return t\n}\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\n\nfunction tightTree (t, g) {\n  function dfs (v) {\n    _forEach(g.nodeEdges(v), function (e) {\n      const edgeV = e.v\n      const w = v === edgeV ? e.w : edgeV\n\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {})\n        t.setEdge(v, w, {})\n        dfs(w)\n      }\n    })\n  }\n\n  _forEach(t.nodes(), dfs)\n\n  return t.nodeCount()\n}\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\n\nfunction findMinSlackEdge (t, g) {\n  return _minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e)\n    }\n  })\n}\n\nfunction shiftRanks (t, g, delta) {\n  _forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta\n  })\n}\n\nexport default feasibleTree\n"],"names":[],"mappings":";;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY,EAAE,CAAC,EAAE;AAC1B,EAAE,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC;AACtB,IAAI,QAAQ,EAAE,KAAK;AACnB,GAAG,EAAC;AACJ;AACA,EAAE,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC;AAC5B,EAAE,MAAM,IAAI,GAAG,CAAC,CAAC,SAAS,GAAE;AAC5B,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,EAAC;AACtB,EAAE,IAAI,KAAI;AACV,EAAE,IAAI,MAAK;AACX;AACA,EAAE,OAAO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,EAAE;AACjC,IAAI,IAAI,GAAG,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAC;AACjC,IAAI,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,EAAC;AAChE,IAAI,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAC;AAC3B,GAAG;AACH;AACA,EAAE,OAAO,CAAC;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;AAC1B,EAAE,SAAS,GAAG,EAAE,CAAC,EAAE;AACnB,IAAI,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE;AAC1C,MAAM,MAAM,KAAK,GAAG,CAAC,CAAC,EAAC;AACvB,MAAM,MAAM,CAAC,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,MAAK;AACzC;AACA,MAAM,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;AACzC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAC;AACxB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAC;AAC3B,QAAQ,GAAG,CAAC,CAAC,EAAC;AACd,OAAO;AACP,KAAK,EAAC;AACN,GAAG;AACH;AACA,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,GAAG,EAAC;AAC1B;AACA,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE;AACtB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAgB,EAAE,CAAC,EAAE,CAAC,EAAE;AACjC,EAAE,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,UAAU,CAAC,EAAE;AACxC,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;AAC3C,MAAM,OAAO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AACxB,KAAK;AACL,GAAG,CAAC;AACJ,CAAC;AACD;AACA,SAAS,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE;AAClC,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,UAAU,CAAC,EAAE;AACnC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAK;AAC3B,GAAG,EAAC;AACJ;;;;"}