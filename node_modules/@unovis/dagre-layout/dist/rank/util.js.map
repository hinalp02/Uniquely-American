{"version":3,"file":"util.js","sources":["../../lib/rank/util.js"],"sourcesContent":["import _forEach from 'lodash-es/forEach'\nimport _map from 'lodash-es/map'\nimport _min from 'lodash-es/min'\nimport _has from 'lodash-es/has'\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nexport function longestPath (g) {\n  const visited = {}\n\n  function dfs (v) {\n    const label = g.node(v)\n\n    if (_has(visited, v)) {\n      return label.rank\n    }\n\n    visited[v] = true\n    const rank = _min(_map(g.outEdges(v), function (e) {\n      return dfs(e.w) - g.edge(e).minlen\n    })) || 0\n    return (label.rank = rank)\n  }\n\n  _forEach(g.sources(), dfs)\n}\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\n\nexport function slack (g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen\n}\nexport default {\n  longestPath: longestPath,\n  slack: slack\n}\n"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,WAAW,EAAE,CAAC,EAAE;AAChC,EAAE,MAAM,OAAO,GAAG,GAAE;AACpB;AACA,EAAE,SAAS,GAAG,EAAE,CAAC,EAAE;AACnB,IAAI,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC;AAC3B;AACA,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE;AAC1B,MAAM,OAAO,KAAK,CAAC,IAAI;AACvB,KAAK;AACL;AACA,IAAI,OAAO,CAAC,CAAC,CAAC,GAAG,KAAI;AACrB,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE;AACvD,MAAM,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;AACxC,KAAK,CAAC,CAAC,IAAI,EAAC;AACZ,IAAI,QAAQ,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;AAC9B,GAAG;AACH;AACA,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,GAAG,EAAC;AAC5B,CAAC;AACD;AACA;AACA;AACA;AACA;AACO,SAAS,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE;AAC7B,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;AAC/D;;;;"}