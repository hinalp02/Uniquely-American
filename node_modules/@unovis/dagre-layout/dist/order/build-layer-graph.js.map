{"version":3,"file":"build-layer-graph.js","sources":["../../lib/order/build-layer-graph.js"],"sourcesContent":["import _uniqueId from 'lodash-es/uniqueId'\nimport _has from 'lodash-es/has'\nimport _isUndefined from 'lodash-es/isUndefined'\nimport _forEach from 'lodash-es/forEach'\nimport { Graph } from '@unovis/graphlibrary'\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\n\nfunction buildLayerGraph (g, rank, relationship) {\n  const root = createRootNode(g)\n  const result = new Graph({\n    compound: true\n  }).setGraph({\n    root: root\n  }).setDefaultNodeLabel(function (v) {\n    return g.node(v)\n  })\n\n  _forEach(g.nodes(), function (v) {\n    const node = g.node(v)\n    const parent = g.parent(v)\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v)\n      result.setParent(v, parent || root) // This assumes we have only short edges!\n\n      _forEach(g[relationship](v), function (e) {\n        const u = e.v === v ? e.w : e.v\n        const edge = result.edge(u, v)\n        const weight = !_isUndefined(edge) ? edge.weight : 0\n        result.setEdge(u, v, {\n          weight: g.edge(e).weight + weight\n        })\n      })\n\n      if (_has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        })\n      }\n    }\n  })\n\n  return result\n}\n\nfunction createRootNode (g) {\n  let v\n\n  while (g.hasNode(v = _uniqueId('_root')));\n\n  return v\n}\n\nexport default buildLayerGraph\n"],"names":[],"mappings":";;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE;AACjD,EAAE,MAAM,IAAI,GAAG,cAAc,CAAC,CAAC,EAAC;AAChC,EAAE,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC;AAC3B,IAAI,QAAQ,EAAE,IAAI;AAClB,GAAG,CAAC,CAAC,QAAQ,CAAC;AACd,IAAI,IAAI,EAAE,IAAI;AACd,GAAG,CAAC,CAAC,mBAAmB,CAAC,UAAU,CAAC,EAAE;AACtC,IAAI,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AACpB,GAAG,EAAC;AACJ;AACA,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,UAAU,CAAC,EAAE;AACnC,IAAI,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC;AAC1B,IAAI,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC;AAC9B;AACA,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,KAAK,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;AAC9E,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,EAAC;AACvB,MAAM,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,IAAI,IAAI,EAAC;AACzC;AACA,MAAM,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE;AAChD,QAAQ,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC;AACvC,QAAQ,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAC;AACtC,QAAQ,MAAM,MAAM,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,EAAC;AAC5D,QAAQ,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE;AAC7B,UAAU,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,MAAM;AAC3C,SAAS,EAAC;AACV,OAAO,EAAC;AACR;AACA,MAAM,IAAI,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE;AACjC,QAAQ,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE;AAC1B,UAAU,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;AAC3C,UAAU,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;AAC7C,SAAS,EAAC;AACV,OAAO;AACP,KAAK;AACL,GAAG,EAAC;AACJ;AACA,EAAE,OAAO,MAAM;AACf,CAAC;AACD;AACA,SAAS,cAAc,EAAE,CAAC,EAAE;AAC5B,EAAE,IAAI,EAAC;AACP;AACA,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC5C;AACA,EAAE,OAAO,CAAC;AACV;;;;"}