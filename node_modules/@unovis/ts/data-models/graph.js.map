{"version":3,"file":"graph.js","sources":["../../src/data-models/graph.ts"],"sourcesContent":["import { isNumber, isUndefined, cloneDeep, isFunction, without, isString, isObject, isEqual } from 'utils/data'\n\n// Types\nimport { GraphInputLink, GraphInputNode, GraphLinkCore, GraphNodeCore } from 'types/graph'\n\n// Core Data Model\nimport { CoreDataModel } from './core'\n\nexport type GraphData<N extends GraphInputNode, L extends GraphInputLink> = {\n  nodes: N[];\n  links?: L[];\n}\n\nexport class GraphDataModel<\n  N extends GraphInputNode,\n  L extends GraphInputLink,\n  OutNode extends GraphNodeCore<N, L> = GraphNodeCore<N, L>,\n  OutLink extends GraphLinkCore<N, L> = GraphLinkCore<N, L>,\n> extends CoreDataModel<GraphData<N, L>> {\n  private _nonConnectedNodes: OutNode[]\n  private _connectedNodes: OutNode[]\n  private _nodes: OutNode[] = []\n  private _links: OutLink[] = []\n  private _inputNodesMap = new Map<OutNode, N>()\n\n  // Model configuration\n  public nodeId: ((n: N) => string | undefined) = n => (isString(n.id) || isFinite(n.id as number)) ? `${n.id}` : undefined\n  public linkId: ((n: L) => string | undefined) = l => (isString(l.id) || isFinite(l.id as number)) ? `${l.id}` : undefined\n  public nodeSort: ((a: N, b: N) => number)\n\n  get data (): GraphData<N, L> {\n    return this._data\n  }\n\n  set data (inputData: GraphData<N, L>) {\n    if (!inputData) return\n    this._data = inputData\n    const prevNodes = this.nodes\n    const prevLinks = this.links\n\n    this._inputNodesMap.clear()\n    const nodes = cloneDeep(inputData?.nodes ?? []) as OutNode[]\n    const links = cloneDeep(inputData?.links ?? []) as OutLink[]\n\n    // Every node or link can have a private state used for rendering needs\n    // On data update we transfer state between objects with same ids\n    this.transferState(nodes, prevNodes, this.nodeId)\n    this.transferState(links, prevLinks, this.linkId)\n\n    // Set node `_id` and `_index`\n    nodes.forEach((node, i) => {\n      node._index = i\n      node._id = this.nodeId(node) || `${i}`\n      this._inputNodesMap.set(node, inputData.nodes[i])\n    })\n\n    // Sort nodes\n    if (isFunction(this.nodeSort)) nodes.sort(this.nodeSort)\n\n    // Fill link source and target\n    links.forEach((link, i) => {\n      link._indexGlobal = i\n      link.source = this.findNode(nodes, link.source)\n      link.target = this.findNode(nodes, link.target)\n    })\n\n    // Set link index for multiple link rendering\n    links.forEach((link, i) => {\n      if (!isUndefined(link._index) && !isUndefined(link._neighbours)) return\n\n      const linksFiltered = links.filter(l =>\n        ((link.source === l.source) && (link.target === l.target)) ||\n        ((link.source === l.target) && (link.target === l.source))\n      )\n\n      linksFiltered.forEach((l, i) => {\n        l._index = i\n        l._id = this.linkId(l) || `${l.source?._id}-${l.target?._id}-${i}`\n        l._neighbours = linksFiltered.length\n        l._direction = ((link.source === l.source) && (link.target === l.target)) ? 1 : -1\n      })\n    })\n\n    nodes.forEach(d => {\n      // Determine if a node is connected or not and store it as a property\n      d.links = links.filter(l => (l.source === d) || (l.target === d))\n      d._isConnected = d.links.length !== 0\n    })\n\n    this._nonConnectedNodes = nodes.filter(d => !d._isConnected)\n    this._connectedNodes = without(nodes, ...this._nonConnectedNodes)\n\n    this._nodes = nodes\n    this._links = links.filter(l => l.source && l.target)\n  }\n\n  get nodes (): OutNode[] {\n    return this._nodes\n  }\n\n  get links (): OutLink[] {\n    return this._links\n  }\n\n  get connectedNodes (): OutNode[] {\n    return this._connectedNodes\n  }\n\n  get nonConnectedNodes (): OutNode[] {\n    return this._nonConnectedNodes\n  }\n\n  private findNode (nodes: OutNode[], nodeIdentifier: number | string | N): OutNode | undefined {\n    let foundNode: OutNode | undefined\n\n    if (isNumber(nodeIdentifier)) foundNode = nodes[nodeIdentifier as number]\n    else if (isString(nodeIdentifier)) foundNode = nodes.find(node => this.nodeId(node) === nodeIdentifier)\n    else if (isObject(nodeIdentifier)) foundNode = nodes.find(node => isEqual(this._inputNodesMap.get(node), nodeIdentifier))\n\n    if (!foundNode) {\n      console.warn(`Node ${nodeIdentifier} is missing from the nodes list`)\n    }\n\n    return foundNode\n  }\n\n  private transferState<T extends { _state: Record<string, any>}> (\n    items: T[],\n    itemsPrev: T[],\n    getId: (d: T) => string\n  ): void {\n    for (const item of items) {\n      const dPrev = itemsPrev.find((dp) => getId(dp) === getId(item))\n      if (dPrev) item._state = { ...dPrev._state }\n      else item._state = {}\n    }\n  }\n}\n"],"names":[],"mappings":"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"}