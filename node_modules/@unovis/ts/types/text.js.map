{"version":3,"file":"text.js","sources":["../../src/types/text.ts"],"sourcesContent":["export enum TrimMode {\n  Start = 'start',\n  Middle = 'middle',\n  End = 'end',\n}\n\nexport enum VerticalAlign {\n  Top = 'top',\n  Middle = 'middle',\n  Bottom = 'bottom',\n}\n\nexport enum FitMode {\n  Wrap = 'wrap',\n  Trim = 'trim',\n}\n\nexport enum TextAlign {\n  Left = 'left',\n  Center = 'center',\n  Right = 'right',\n}\n\nexport type UnovisText = {\n  // The text content to be displayed.\n  text: string;\n  // The font size of the text in pixels.\n  fontSize: number;\n  // The font family of the text (optional). Default: `'var(--vis-font-family)'`.\n  fontFamily?: string;\n  // The font weight of the text (optional)`.\n  fontWeight?: number;\n  // The color of the text (optional).\n  color?: string;\n  // The line height scaling factor for the text (optional).\n  lineHeight?: number;\n  // The top margin of the text block in pixels (optional).\n  marginTop?: number;\n  // The bottom margin of the text block in pixels (optional).\n  marginBottom?: number;\n  // The font width-to-height ratio (optional).\n  fontWidthToHeightRatio?: number;\n}\n\nexport type UnovisWrappedText = UnovisText & {\n  // An array of text lines, where each element represents a single line of text.\n  _lines: string[];\n  // Estimated height of this text block\n  _estimatedHeight: number;\n}\n\nexport type UnovisTextOptions = {\n  // Optional X coordinates of the text.\n  x?: number;\n  // Optional Y coordinates of the text.\n  y?: number;\n  // The maximum width of the text in pixels.\n  width?: number;\n  // The word separator(s) used to split the text into words.\n  separator?: string | string[];\n  // The vertical alignment of the text ('top', 'middle', or 'bottom').\n  verticalAlign?: VerticalAlign | string;\n  // The horizontal text alignment ('left', 'center', or 'right').\n  textAlign?: TextAlign | string;\n  // Whether to use a fast estimation method or a more accurate one for text calculations.\n  fastMode?: boolean;\n  // Force word break if they don't fit into the width\n  wordBreak?: boolean;\n}\n\nexport type UnovisTextFrameOptions = UnovisTextOptions & {\n  height?: number;\n}\n\n"],"names":[],"mappings":"IAAY,SAIX;AAJD,CAAA,UAAY,QAAQ,EAAA;AAClB,IAAA,QAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,QAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,QAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;AACb,CAAC,EAJW,QAAQ,KAAR,QAAQ,GAInB,EAAA,CAAA,CAAA,CAAA;IAEW,cAIX;AAJD,CAAA,UAAY,aAAa,EAAA;AACvB,IAAA,aAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;AACX,IAAA,aAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,aAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACnB,CAAC,EAJW,aAAa,KAAb,aAAa,GAIxB,EAAA,CAAA,CAAA,CAAA;IAEW,QAGX;AAHD,CAAA,UAAY,OAAO,EAAA;AACjB,IAAA,OAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,OAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACf,CAAC,EAHW,OAAO,KAAP,OAAO,GAGlB,EAAA,CAAA,CAAA,CAAA;IAEW,UAIX;AAJD,CAAA,UAAY,SAAS,EAAA;AACnB,IAAA,SAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,SAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,SAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACjB,CAAC,EAJW,SAAS,KAAT,SAAS,GAIpB,EAAA,CAAA,CAAA;;;;"}