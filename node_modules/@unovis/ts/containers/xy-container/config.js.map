{"version":3,"file":"config.js","sources":["../../../src/containers/xy-container/config.ts"],"sourcesContent":["// Core\nimport { XYComponentCore } from 'core/xy-component'\nimport { ContainerDefaultConfig, ContainerConfigInterface } from 'core/container/config'\nimport { Tooltip } from 'components/tooltip'\n\n// Components\nimport { Axis } from 'components/axis'\nimport { Crosshair } from 'components/crosshair'\n\n// Types\nimport { ContinuousScale } from 'types/scale'\nimport { Direction } from 'types/direction'\n\nexport interface XYContainerConfigInterface<Datum> extends ContainerConfigInterface {\n  /** An array of visualization components. Default: `[]` */\n  components?: XYComponentCore<Datum>[];\n\n  /** Scale for X dimension, e.g. Scale.scaleLinear().\n   * If set, this value will override the components' xScale and they will have a single shared xScale instance.\n   * By default the components have their own scale instances but their `domain` and `range` values are synchronized.\n   * Default: `undefined` */\n  xScale?: ContinuousScale;\n  /** Scale domain (data extent) for X dimension. By default this value is calculated automatically based on data. */\n  xDomain?: [number | undefined, number | undefined];\n  /** Constraint the minimum value of the X scale domain. Useful when the data is plotted along the X axis.\n   * For example, imagine that you have a chart with dynamic data that has negative values. When values are small\n   * (let's say in the range of [-0.01, 0]), you might still want the chart to display some meaningful value range (e.g. [-1, 0]). That can\n   * be achieved by setting `xDomainMinConstraint` to `[undefined, -1]`. In addition to that, if you want to cut off the\n   * values that are too low (let's say lower than -100), you can set the constraint to `[-100, -1]`\n   * Default: `undefined` */\n  xDomainMinConstraint?: [number | undefined, number | undefined];\n  /** Constraint the minimum value of the X scale domain. Useful when the data is plotted along the X axis.\n   * For example, imagine that you have a chart with dynamic data. When values are small\n   * (let's say < 0.01), you might still want the chart to display some meaningful value range (e.g. [0, 1]). That can\n   * be achieved by setting `xDomainMaxConstraint` to `[1, undefined]`. In addition to that, if you want to cut off the\n   * values that are too high (let's say higher than 100), you can set the constraint to `[1, 100]`\n   * Default: `undefined` */\n  xDomainMaxConstraint?: [number | undefined, number | undefined];\n  /** Force set the X scale range (in the screen space). By default the range is calculated automatically based on the\n   * chart's set up */\n  xRange?: [number, number];\n\n  /** Scale for Y dimension, e.g. Scale.scaleLinear().\n   * If set, this value will override the components' yScale and they will have a single shared yScale instance.\n   * By default the components have their own scale instances but their `domain` and `range` values are synchronized.\n   * Default: `undefined` */\n  yScale?: ContinuousScale;\n  /** Scale domain (data extent) for Y dimension. By default this value is calculated automatically based on data. */\n  yDomain?: [number | undefined, number | undefined];\n  /** Constraint the minimum value of the Y scale domain.\n   * For example, imagine that you have a chart with dynamic data that has negative values. When values are small\n   * (let's say in the range of [-0.01, 0]), you might still want the chart to display some meaningful value range (e.g. [-1, 0]). That can\n   * be achieved by setting `yDomainMinConstraint` to `[undefined, -1]`. In addition to that, if you want to cut off the\n   * values that are too low (let's say lower than -100), you can set the constraint to `[-100, -1]`\n   * Default: `undefined` */\n  yDomainMinConstraint?: [number | undefined, number | undefined];\n  /** Constraint the minimum value of the Y scale domain.\n   * For example, imagine that you have a chart with dynamic data. When values are small\n   * (let's say < 0.01), you might still want the chart to display some meaningful value range (e.g. [0, 1]). That can\n   * be achieved by setting `yDomainMaxConstraint` to `[1, undefined]`. In addition to that, if you want to cut off the\n   * values that are too high (let's say higher than 100), you can set the constraint to `[1, 100]`\n   * Default: `undefined` */\n  yDomainMaxConstraint?: [number | undefined, number | undefined];\n  /** Force set the Y scale range (in the screen space). By default the range is calculated automatically based on the\n   * chart's set up */\n  yRange?: [number, number];\n  /** Y Axis direction. Default: `Direction.North` */\n  yDirection?: Direction.South | Direction.North | string;\n\n  /** X Axis component instance. Default: `undefined` */\n  xAxis?: Axis<Datum>;\n  /** Y Axis component instance. Default: `undefined` */\n  yAxis?: Axis<Datum>;\n  /** Enables automatic calculation of chart margins based on the size of the axes. Default: `true` */\n  autoMargin?: boolean;\n  /** Tooltip component. Default: `undefined` */\n  tooltip?: Tooltip | undefined;\n  /** Crosshair component. Default: `undefined` */\n  crosshair?: Crosshair<Datum> | undefined;\n  /** Prevents the chart domain from being empty (when domain's min and max values are equal).\n   *  That usually happens when all the data values are equal or when there's no data.\n   *  Setting to `true` will automatically extend the domain by `+1` when the domain is empty (domain start equals domain end).\n   *  Setting to `null` will extend the empty X domain, but only when there's no data.\n   *  Setting to `false` will keep the domain as is.\n   *  Default: `null` */\n  preventEmptyDomain?: boolean | null;\n  /** Sets the Y scale domain based on the current X scale domain (not the whole dataset). Default: `false` */\n  scaleByDomain?: boolean;\n}\n\n\nexport const XYContainerDefaultConfig: XYContainerConfigInterface<unknown> = {\n  ...ContainerDefaultConfig,\n  components: [],\n  tooltip: undefined,\n  crosshair: undefined,\n  xAxis: undefined,\n  yAxis: undefined,\n  autoMargin: true,\n\n  xScale: undefined,\n  xDomain: undefined,\n  xDomainMinConstraint: undefined,\n  xDomainMaxConstraint: undefined,\n  xRange: undefined,\n\n  yScale: undefined,\n  yDomain: undefined,\n  yDomainMinConstraint: undefined,\n  yDomainMaxConstraint: undefined,\n  yRange: undefined,\n  yDirection: Direction.North,\n\n  preventEmptyDomain: null,\n  scaleByDomain: false,\n}\n\n"],"names":[],"mappings":";;;AA2Fa,MAAA,wBAAwB,mCAChC,sBAAsB,CAAA,EAAA,EACzB,UAAU,EAAE,EAAE,EACd,OAAO,EAAE,SAAS,EAClB,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,SAAS,EAChB,KAAK,EAAE,SAAS,EAChB,UAAU,EAAE,IAAI,EAEhB,MAAM,EAAE,SAAS,EACjB,OAAO,EAAE,SAAS,EAClB,oBAAoB,EAAE,SAAS,EAC/B,oBAAoB,EAAE,SAAS,EAC/B,MAAM,EAAE,SAAS,EAEjB,MAAM,EAAE,SAAS,EACjB,OAAO,EAAE,SAAS,EAClB,oBAAoB,EAAE,SAAS,EAC/B,oBAAoB,EAAE,SAAS,EAC/B,MAAM,EAAE,SAAS,EACjB,UAAU,EAAE,SAAS,CAAC,KAAK,EAE3B,kBAAkB,EAAE,IAAI,EACxB,aAAa,EAAE,KAAK;;;;"}