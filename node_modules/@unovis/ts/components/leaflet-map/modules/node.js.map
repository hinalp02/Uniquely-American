{"version":3,"file":"node.js","sources":["../../../../src/components/leaflet-map/modules/node.ts"],"sourcesContent":["import { select, Selection } from 'd3-selection'\nimport { color } from 'd3-color'\nimport type L from 'leaflet'\n\n// Types\nimport { Rect } from 'types/misc'\nimport { GenericDataRecord } from 'types/data'\n\n// Utils\nimport { smartTransition } from 'utils/d3'\nimport { estimateTextSize, trimStringMiddle } from 'utils/text'\nimport { clamp, getString } from 'utils/data'\nimport { getCSSVariableValueInPixels, rectIntersect } from 'utils/misc'\nimport { hexToBrightness } from 'utils/color'\nimport { cssvar } from 'utils/style'\nimport { getPointPos } from './utils'\n\n\n// Local Types\nimport { LeafletMapPointDatum, LeafletMapClusterDatum, LeafletMapPoint, LeafletMapPointShape } from '../types'\n\n// Modules\nimport { updateDonut } from './donut'\n\n// Config\nimport { LeafletMapConfigInterface } from '../config'\n\nimport * as s from '../style'\n\nconst BOTTOM_LABEL_TOP_MARGIN = 10\n\nexport function createNodes<D extends GenericDataRecord> (\n  selection: Selection<SVGGElement, LeafletMapPoint<D>, SVGGElement, unknown>\n): void {\n  selection.append('path')\n    .attr('class', s.pointPath)\n    .attr('id', d => `point-${d.id}`)\n    .style('opacity', 0)\n\n  selection.append('g')\n    .attr('class', s.donutCluster)\n\n  selection.append('text')\n    .attr('class', s.innerLabel)\n    .classed(s.innerLabelCluster, d => (d.properties as LeafletMapClusterDatum<D>).cluster)\n    .attr('id', d => `label-${d.id}`)\n    .attr('dy', '0.32em')\n\n  selection.append('text')\n    .attr('class', s.bottomLabel)\n    .attr('dy', '0.32em')\n    .attr('opacity', 1)\n}\n\nexport function updateNodes<D extends GenericDataRecord> (\n  selection: Selection<SVGGElement, LeafletMapPoint<D>, SVGGElement, unknown>,\n  config: LeafletMapConfigInterface<D>,\n  leafletMap: L.Map,\n  mapMoveZoomUpdateOnly: boolean\n): void {\n  selection.each((d, i, elements) => {\n    const group = select(elements[i])\n    const node: Selection<SVGPathElement, any, SVGGElement, any> = group.select(`.${s.pointPath}`)\n    const innerLabel: Selection<SVGTextElement, any, SVGElement, any> = group.select(`.${s.innerLabel}`)\n    const bottomLabel: Selection<SVGTextElement, any, SVGElement, any> = group.select(`.${s.bottomLabel}`)\n\n    const { x, y } = getPointPos(d, leafletMap)\n    const donutData = d.donutData\n    const isCluster = (d.properties as LeafletMapClusterDatum<D>).cluster\n    const fromExpandedCluster = !!(d.properties as LeafletMapPointDatum<D>).expandedClusterPoint\n\n    const innerLabelText = (isCluster\n      ? getString(d.properties as LeafletMapClusterDatum<D>, config.clusterLabel)\n      : getString(d.properties as LeafletMapPointDatum<D>, config.pointLabel)\n    ) ?? ''\n    const innerLabelColor = (isCluster\n      ? getString(d.properties as LeafletMapClusterDatum<D>, config.clusterLabelColor)\n      : getString(d.properties as LeafletMapPointDatum<D>, config.pointLabelColor)\n    ) ?? null\n    const bottomLabelText = (isCluster\n      ? getString(d.properties as LeafletMapClusterDatum<D>, config.clusterBottomLabel)\n      : getString(d.properties as LeafletMapPointDatum<D>, config.pointBottomLabel)\n    ) ?? ''\n    const pointCursor = getString(d.properties as LeafletMapPointDatum<D>, config.pointCursor)\n    const pointShape = getString(d.properties as LeafletMapPointDatum<D>, config.pointShape)\n    const isRing = pointShape === LeafletMapPointShape.Ring\n    const isCircular = (pointShape === LeafletMapPointShape.Circle) || isRing || isCluster || !pointShape\n\n    // To get updated on every render call\n    const ringWidth = (isCluster && config.clusterRingWidth) || (isRing && config.pointRingWidth) || 0\n    group.attr('transform', `translate(${x},${y})`)\n    group.select<SVGGElement>(`.${s.donutCluster}`)\n      .call(updateDonut, donutData, isCircular ? d.radius : 0, ringWidth)\n\n    node.attr('d', d.path)\n    node.style('cursor', isCluster ? 'pointer' : pointCursor)\n    bottomLabel.attr('transform', `translate(0,${d.radius + BOTTOM_LABEL_TOP_MARGIN})`)\n    innerLabel.attr('font-size', () => {\n      const fontSize = d.radius / Math.pow(innerLabelText.length, 0.4)\n      return clamp(fontSize, fontSize, 16)\n    })\n\n    if (mapMoveZoomUpdateOnly) return\n\n    // Updates required only when data changes\n    node\n      .classed(s.pointPathCluster, isCluster)\n      .classed(s.pointPathRing, isRing)\n      .style('fill', d.color)\n      .style('stroke', d.color) // being used for hover\n      .style('stroke-width', ringWidth)\n      .style('opacity', 1)\n\n    innerLabel\n      .text(innerLabelText || null)\n      .attr('visibility', innerLabelText ? null : 'hidden')\n      .style('fill', () => {\n        if (innerLabelColor) return innerLabelColor\n\n        // Determine the label color based on the point brightness\n        const c = getComputedStyle(node.node()).fill\n        const hex = color(c)?.hex()\n        if (!hex) return null\n\n        const brightness = hexToBrightness(hex)\n        return brightness > 0.5\n          ? (isCluster ? cssvar(s.variables.mapClusterInnerLabelTextColorDark) : cssvar(s.variables.mapPointInnerLabelTextColorDark))\n          : (isCluster ? cssvar(s.variables.mapClusterInnerLabelTextColorLight) : cssvar(s.variables.mapPointInnerLabelTextColorLight))\n      })\n\n    const bottomLabelTextTrimmed = trimStringMiddle(bottomLabelText, 15)\n    bottomLabel\n      .text(bottomLabelTextTrimmed)\n      .attr('font-size', getCSSVariableValueInPixels(cssvar(s.variables.mapPointBottomLabelFontSize), selection.node()))\n      .attr('visibility', fromExpandedCluster ? 'hidden' : null)\n  })\n}\n\nexport interface LabelSVGGElement extends SVGGElement {\n  labelVisible?: boolean;\n}\n\nexport function collideLabels<D extends GenericDataRecord> (\n  selection: Selection<SVGGElement, LeafletMapPoint<D>, SVGGElement, unknown>,\n  leafletMap: L.Map\n): void {\n  selection.each((datum1: LeafletMapPoint<D>, i, elements: ArrayLike<LabelSVGGElement>) => {\n    const group1LabelElement = elements[i]\n    const group1 = select(group1LabelElement)\n    const label1: Selection<SVGTextElement, any, SVGElement, any> = group1.select(`.${s.bottomLabel}`)\n    group1LabelElement.labelVisible = true\n\n    // Calculate bounding rect of point's bottom label\n    const bottomLabelFontSizePx = getCSSVariableValueInPixels(cssvar(s.variables.mapPointBottomLabelFontSize), selection.node())\n    const p1Pos = getPointPos(datum1, leafletMap)\n    const label1Size = estimateTextSize(label1, bottomLabelFontSizePx, 0.32, true, 0.6)\n    const label1BoundingRect: Rect = {\n      x: p1Pos.x - label1Size.width / 2,\n      y: p1Pos.y - label1Size.height / 2 + datum1.radius + BOTTOM_LABEL_TOP_MARGIN,\n      width: label1Size.width,\n      height: label1Size.height,\n    }\n\n    for (let j = 0; j < elements.length; j += 1) {\n      if (i === j) continue\n      const group2LabelElement = elements[j]\n      const group2 = select(group2LabelElement)\n      const label2: Selection<SVGTextElement, any, SVGElement, any> = group2.select(`.${s.bottomLabel}`)\n      const datum2 = group2.datum() as LeafletMapPoint<D>\n\n      // Calculate bounding rect of the second point's circle\n      const p2Pos = getPointPos(datum2, leafletMap)\n      const point2BoundingRect = {\n        x: p2Pos.x - datum2.radius,\n        y: p2Pos.y - datum2.radius,\n        width: 2 * datum2.radius,\n        height: 2 * datum2.radius,\n      }\n\n      let intersect = rectIntersect(label1BoundingRect, point2BoundingRect)\n\n      // If there's not intersection, check a collision with the second point's label\n      const label2Visible = group2LabelElement.labelVisible\n      if (!intersect && label2Visible) {\n        const label2Size = estimateTextSize(label2, bottomLabelFontSizePx, 0.32, true, 0.6)\n        intersect = rectIntersect(label1BoundingRect, {\n          x: p2Pos.x - label2Size.width / 2,\n          y: p2Pos.y + datum2.radius + BOTTOM_LABEL_TOP_MARGIN - label2Size.height / 2,\n          width: label2Size.width,\n          height: label2Size.height,\n        })\n      }\n\n      if (intersect) {\n        group1LabelElement.labelVisible = false\n        break\n      }\n    }\n\n    smartTransition(label1, 0).attr('opacity', group1LabelElement.labelVisible ? 1 : 0)\n  })\n}\n\nexport function removeNodes<D extends GenericDataRecord> (\n  selection: Selection<SVGGElement, LeafletMapPoint<D>, SVGGElement, unknown>\n): void {\n  selection.remove()\n}\n"],"names":["s.pointPath","s.donutCluster","s.innerLabel","s.innerLabelCluster","s.bottomLabel","innerLabel","bottomLabel","s.pointPathCluster","s.pointPathRing","s.variables"],"mappings":"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"}