{"version":3,"file":"selectionRing.js","sources":["../../../../src/components/leaflet-map/modules/selectionRing.ts"],"sourcesContent":["import type L from 'leaflet'\nimport { Selection } from 'd3-selection'\n\n// Types\nimport { GenericDataRecord } from 'types/data'\n\n// Utils\nimport { getString } from 'utils/data'\nimport { getPointPos } from './utils'\n\n// Local Types\nimport { LeafletMapPoint, LeafletMapPointDatum } from '../types'\n\n// Config\nimport { LeafletMapConfigInterface } from '../config'\n\nimport * as s from '../style'\n\n\nexport function createNodeSelectionRing (\n  selection: Selection<SVGGElement, unknown, SVGElement, undefined>\n): void {\n  selection.datum({ _zIndex: 3 })\n  selection.append('path').attr('class', s.pointSelection)\n}\n\nexport function updateNodeSelectionRing<D extends GenericDataRecord> (\n  selection: Selection<SVGGElement, unknown, SVGElement, undefined>,\n  selectedPoint: LeafletMapPoint<D>,\n  pointData: LeafletMapPoint<D>[],\n  config: LeafletMapConfigInterface<D>,\n  leafletMap: L.Map\n): void {\n  selection.attr('class', s.pointSelectionRing)\n  const pointSelection = selection.select(`.${s.pointSelection}`)\n  if (selectedPoint) {\n    const isCluster = selectedPoint.isCluster\n    const selectedPointId: string | undefined = getString(selectedPoint.properties as LeafletMapPointDatum<D>, config.pointId)\n    const foundPoint = pointData.find(d =>\n      isCluster\n        ? (d.id === selectedPoint.id)\n        : (selectedPointId && (getString(d.properties as LeafletMapPointDatum<D>, config.pointId) === selectedPointId))\n    )\n    selection\n      .attr('transform', d => {\n        const { x, y } = getPointPos<D>(foundPoint ?? selectedPoint, leafletMap)\n        return `translate(${x},${y})`\n      })\n      .classed(`${(selectedPoint.properties as LeafletMapPointDatum<D>).shape}`, true)\n\n    pointSelection\n      .classed('active', Boolean(foundPoint))\n      .attr('d', foundPoint ? foundPoint.path : null)\n      .style('fill', 'transparent')\n      .style('stroke-width', 1)\n      .style('stroke', d => {\n        const node = foundPoint || selectedPoint\n        return node?.color\n      })\n  } else {\n    pointSelection.classed('active', false)\n  }\n}\n"],"names":["s.pointSelection","s.pointSelectionRing","pointSelection"],"mappings":";;;;AAMA;AAaM,SAAU,uBAAuB,CACrC,SAAiE,EAAA;IAEjE,SAAS,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAA;AAC/B,IAAA,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,EAAEA,cAAgB,CAAC,CAAA;AAC1D,CAAC;AAEK,SAAU,uBAAuB,CACrC,SAAiE,EACjE,aAAiC,EACjC,SAA+B,EAC/B,MAAoC,EACpC,UAAiB,EAAA;IAEjB,SAAS,CAAC,IAAI,CAAC,OAAO,EAAEC,kBAAoB,CAAC,CAAA;AAC7C,IAAA,MAAMC,gBAAc,GAAG,SAAS,CAAC,MAAM,CAAC,CAAI,CAAA,EAAAF,cAAgB,CAAE,CAAA,CAAC,CAAA;AAC/D,IAAA,IAAI,aAAa,EAAE;AACjB,QAAA,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAA;AACzC,QAAA,MAAM,eAAe,GAAuB,SAAS,CAAC,aAAa,CAAC,UAAqC,EAAE,MAAM,CAAC,OAAO,CAAC,CAAA;QAC1H,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,IACjC,SAAS;eACJ,CAAC,CAAC,EAAE,KAAK,aAAa,CAAC,EAAE;eACzB,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC,UAAqC,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,eAAe,CAAC,CAAC,CAClH,CAAA;QACD,SAAS;AACN,aAAA,IAAI,CAAC,WAAW,EAAE,CAAC,IAAG;AACrB,YAAA,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,WAAW,CAAI,UAAU,KAAV,IAAA,IAAA,UAAU,cAAV,UAAU,GAAI,aAAa,EAAE,UAAU,CAAC,CAAA;AACxE,YAAA,OAAO,CAAa,UAAA,EAAA,CAAC,CAAI,CAAA,EAAA,CAAC,GAAG,CAAA;AAC/B,SAAC,CAAC;aACD,OAAO,CAAC,CAAI,EAAA,aAAa,CAAC,UAAsC,CAAC,KAAK,CAAE,CAAA,EAAE,IAAI,CAAC,CAAA;QAElFE,gBAAc;AACX,aAAA,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;AACtC,aAAA,IAAI,CAAC,GAAG,EAAE,UAAU,GAAG,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;AAC9C,aAAA,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC;AAC5B,aAAA,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;AACxB,aAAA,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAG;AACnB,YAAA,MAAM,IAAI,GAAG,UAAU,IAAI,aAAa,CAAA;AACxC,YAAA,OAAO,IAAI,KAAJ,IAAA,IAAA,IAAI,uBAAJ,IAAI,CAAE,KAAK,CAAA;AACpB,SAAC,CAAC,CAAA;AACL,KAAA;AAAM,SAAA;AACL,QAAAA,gBAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;AACxC,KAAA;AACH;;;;"}