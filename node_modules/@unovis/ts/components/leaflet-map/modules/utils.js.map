{"version":3,"file":"utils.js","sources":["../../../../src/components/leaflet-map/modules/utils.ts"],"sourcesContent":["import type L from 'leaflet'\nimport { min, max } from 'd3-array'\nimport Supercluster, { ClusterFeature, PointFeature } from 'supercluster'\n\n// Utils\nimport { clamp, getString, getNumber } from 'utils/data'\nimport { getColor } from 'utils/color'\nimport { polygon, circlePath } from 'utils/path'\nimport { getHTMLTransform } from 'utils/html'\n\n// Types\nimport { ColorAccessor, NumericAccessor, StringAccessor } from 'types/accessor'\nimport { GenericDataRecord } from 'types/data'\n\n// Local Types\nimport {\n  LeafletMapPoint,\n  LeafletMapPointShape,\n  LeafletMapPieDatum,\n  LeafletMapPointStyles,\n  PointExpandedClusterProperties,\n  LeafletMapPointDatum,\n  LeafletMapClusterDatum,\n} from '../types'\n\n// Config\nimport { LeafletMapConfigInterface } from '../config'\n\nexport function bBoxMerge (\n  bBoxArray: ({x1: number; x2: number; y1: number; y2: number})[]):\n  { x: number; y: number; width: number; height: number } {\n  let box = { x1: 0, x2: 0, y1: 0, y2: 0 }\n  bBoxArray.forEach(coords => {\n    if (!box) {\n      box = { ...coords }\n    } else {\n      if (box.x1 > coords.x1) box.x1 = coords.x1\n      if (box.y1 > coords.y1) box.y1 = coords.y1\n      if (box.x2 < coords.x2) box.x2 = coords.x2\n      if (box.y2 < coords.y2) box.y2 = coords.y2\n    }\n  })\n\n  return {\n    x: box.x1,\n    y: box.y1,\n    width: box.x2 - box.x1,\n    height: box.y2 - box.y1,\n  }\n}\n\nexport const getNextZoomLevelOnClusterClick = (level: number): number => clamp(1 + level * 1.5, level, 12)\n\nexport function projectPoint<D extends GenericDataRecord> (\n  geoJSONPoint: LeafletMapPoint<D> | ClusterFeature<LeafletMapClusterDatum<D>> | PointFeature<LeafletMapPointDatum<D>>,\n  leafletMap: L.Map\n): { x: number; y: number } {\n  const lat = geoJSONPoint.geometry.coordinates[1]\n  const lon = geoJSONPoint.geometry.coordinates[0]\n  const projected = leafletMap.latLngToLayerPoint([lat, lon])\n  return projected\n}\n\nexport function getPointRadius<D extends GenericDataRecord> (\n  geoPoint: ClusterFeature<LeafletMapClusterDatum<D>> | PointFeature<LeafletMapPointDatum<D>> | PointFeature<PointExpandedClusterProperties<D>>,\n  pointRadius: NumericAccessor<LeafletMapPointDatum<D>> | NumericAccessor<LeafletMapClusterDatum<D>>,\n  zoomLevel: number\n): number {\n  const isDynamic = !pointRadius\n  const radius = isDynamic\n    ? 1 + 2 * Math.pow(zoomLevel, 0.80)\n    // Todo: Needs a better typings handling\n    : getNumber((geoPoint.properties as LeafletMapPointDatum<D>), pointRadius as NumericAccessor<LeafletMapPointDatum<D>>)\n\n  const isCluster = (geoPoint as ClusterFeature<D>).properties.cluster\n  return (isCluster && isDynamic)\n    ? clamp(Math.pow((geoPoint as ClusterFeature<D>).properties.point_count, 0.35) * radius, radius * 1.1, radius * 3)\n    : radius\n}\n\nexport function getPointPos<D extends GenericDataRecord> (point: LeafletMapPoint<D> | ClusterFeature<LeafletMapClusterDatum<D>> | PointFeature<LeafletMapPointDatum<D>>, leafletMap: L.Map): { x: number; y: number } {\n  const properties = point.properties as LeafletMapPointDatum<D>\n  const isFromCluster = !!(properties).expandedClusterPoint\n\n  if (isFromCluster) {\n    const { x, y } = projectPoint(properties.expandedClusterPoint, leafletMap)\n    return {\n      x: x + properties.dx,\n      y: y + properties.dy,\n    }\n  } else {\n    return projectPoint(point, leafletMap)\n  }\n}\n\nexport function getPointDisplayOrder<D extends GenericDataRecord> (\n  d: LeafletMapPoint<D>,\n  pointStatus: StringAccessor<LeafletMapPointDatum<D> | LeafletMapClusterDatum<D>>,\n  colorMap: LeafletMapPointStyles<D>\n): number {\n  const status = getString(d.properties, pointStatus)\n  const statusList = Object.keys(colorMap)\n  return Object.keys(statusList).indexOf(status)\n}\n\nexport function toGeoJSONPoint<D extends GenericDataRecord> (d: D, i: number, pointLatitude: NumericAccessor<D>, pointLongitude: NumericAccessor<D>): PointFeature<D> {\n  const lat = getNumber(d, pointLatitude) as number\n  const lon = getNumber(d, pointLongitude) as number\n\n  return {\n    type: 'Feature',\n    properties: {\n      ...d,\n      _index: i,\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [lon, lat],\n    },\n  }\n}\n\nexport function calculateClusterIndex<D extends GenericDataRecord> (data: D[], config: LeafletMapConfigInterface<D>, maxClusterZoomLevel = 23): Supercluster<D> {\n  const { colorMap, pointShape, pointLatitude, pointLongitude, clusteringDistance } = config\n  return new Supercluster<D, Supercluster.AnyProps>({\n    radius: clusteringDistance,\n    maxZoom: maxClusterZoomLevel,\n    map: (d): Supercluster.AnyProps => {\n      const shape = getString(d, pointShape)\n\n      const clusterPoint = { shape } as Supercluster.AnyProps\n      for (const key of Object.keys(colorMap)) {\n        clusterPoint[key] = d[key] || 0\n      }\n\n      return clusterPoint\n    },\n    reduce: (acc, clusterPoint): void => {\n      acc.shape = acc.shape === clusterPoint.shape ? acc.shape : LeafletMapPointShape.Circle\n      acc.value = (acc.value ?? 0) + (clusterPoint.value ?? 0)\n\n      for (const key of Object.keys(colorMap)) {\n        acc[key] += clusterPoint[key]\n      }\n    },\n  }).load(data.map((d, i) => toGeoJSONPoint(d, i, pointLatitude, pointLongitude)))\n}\n\nexport function getNodePathData ({ x, y }: { x: number; y: number }, radius: number, shape: LeafletMapPointShape): string {\n  switch (shape) {\n    case LeafletMapPointShape.Triangle:\n      return polygon(radius * 2, 3)\n    case LeafletMapPointShape.Square:\n      return polygon(radius * 2, 4)\n    case LeafletMapPointShape.Circle:\n    case LeafletMapPointShape.Ring:\n    default:\n      return circlePath(x, y, radius)\n  }\n}\n\nexport function getDonutData<D extends GenericDataRecord> (\n  d: LeafletMapClusterDatum<D> | LeafletMapPointDatum<D>,\n  colorMap: LeafletMapPointStyles<D>\n): LeafletMapPieDatum[] {\n  return Object.keys(colorMap).map(key => ({\n    name: key,\n    value: d[key] as number,\n    color: colorMap[key].color,\n    className: colorMap[key].className,\n  }))\n}\n\nexport function geoJsonPointToScreenPoint<D extends GenericDataRecord> (\n  geoPoint: ClusterFeature<LeafletMapClusterDatum<D>> | PointFeature<LeafletMapPointDatum<D>>,\n  i: number,\n  leafletMap: L.Map,\n  config: LeafletMapConfigInterface<D>\n): LeafletMapPoint<D> {\n  const zoomLevel = leafletMap.getZoom()\n  const isCluster = (geoPoint.properties as LeafletMapClusterDatum<D>).cluster\n  const clusterIndex = (geoPoint.properties as LeafletMapClusterDatum<D>).clusterIndex\n  const clusterPoints = isCluster ? clusterIndex.getLeaves((geoPoint.properties as LeafletMapClusterDatum<D>).cluster_id as number, Infinity).map(d => d.properties) : undefined\n  const { x, y } = getPointPos(geoPoint, leafletMap)\n\n  const id = isCluster ? `cluster-${geoPoint.id}` : (getString(geoPoint.properties as LeafletMapPointDatum<D>, config.pointId) ?? geoPoint.geometry.coordinates.join(''))\n  // Todo: Needs a better typings handling\n  const pointColor = getColor(geoPoint.properties as LeafletMapPointDatum<D>, (isCluster ? config.clusterColor : config.pointColor) as ColorAccessor<LeafletMapPointDatum<D>>)\n  const radius = getPointRadius(geoPoint, isCluster ? config.clusterRadius : config.pointRadius, zoomLevel)\n  const shape = isCluster ? LeafletMapPointShape.Circle : getString(geoPoint.properties as LeafletMapPointDatum<D>, config.pointShape) as LeafletMapPointShape\n  const isRing = shape === LeafletMapPointShape.Ring\n\n  const donutData = getDonutData(geoPoint.properties, config.colorMap)\n  const maxValue = max(donutData, d => d.value)\n  const maxValueIndex = donutData.map(d => d.value).indexOf(maxValue)\n  const biggestDatum = donutData[maxValueIndex ?? 0]\n\n  const color = isCluster ? pointColor\n    : (isRing ? null : (pointColor ?? biggestDatum?.color))\n  const bbox = { x1: x - radius, y1: y - radius, x2: x + radius, y2: y + radius }\n  const path = getNodePathData({ x: 0, y: 0 }, radius, shape)\n  const _zIndex = 0\n\n  const screenPoint: LeafletMapPoint<D> = {\n    ...geoPoint,\n    id,\n    bbox,\n    radius,\n    donutData,\n    path,\n    color,\n    isCluster,\n    clusterIndex,\n    clusterPoints,\n    _zIndex,\n  }\n\n  return screenPoint\n}\n\nexport function shouldClusterExpand<D extends GenericDataRecord> (\n  cluster: LeafletMapPoint<D>,\n  zoomLevel: number,\n  midLevel = 4,\n  maxLevel = 8,\n  maxClusterZoomLevel = 23\n): boolean {\n  if (!cluster) return false\n\n  const clusterExpansionZoomLevel = cluster.clusterIndex.getClusterExpansionZoom(cluster.properties.cluster_id as number)\n  return zoomLevel >= maxLevel ||\n        (zoomLevel >= midLevel && (cluster.properties.point_count < 20 || clusterExpansionZoomLevel >= maxClusterZoomLevel))\n}\n\nexport function findPointAndClusterByPointId<D extends GenericDataRecord> (\n  points: LeafletMapPoint<D>[],\n  id: string,\n  pointId: StringAccessor<D>\n): {\n    point: PointFeature<D> | undefined;\n    cluster: LeafletMapPoint<D> | undefined;\n  } {\n  let point\n  let cluster\n  points.forEach(p => {\n    if (p.isCluster) {\n      const leaves = p.clusterIndex.getLeaves((p.properties as LeafletMapClusterDatum<D>).cluster_id as number, Infinity) ?? []\n      const foundPoint = leaves.find(d => getString(d.properties, pointId) === id)\n      if (foundPoint) {\n        point = foundPoint\n        cluster = p\n      }\n    }\n  })\n  return { point, cluster }\n}\n\nexport function getNodeRelativePosition<D extends GenericDataRecord> (d: LeafletMapPoint<D>, leafletMap: L.Map): { x: number; y: number } {\n  const paneTransform = getHTMLTransform(leafletMap.getPane('mapPane'))\n  const { x, y } = getPointPos(d, leafletMap)\n  return { x: x + paneTransform[0], y: y + paneTransform[1] }\n}\n\nexport function getClusterRadius<D extends GenericDataRecord> (cluster: { points: PointFeature<PointExpandedClusterProperties<D>>[]; cluster: LeafletMapPoint<D> }): number {\n  const { points } = cluster\n  const minX = min<number>(points.map(d => d.properties.dx - d.properties.r))\n  const maxX = max<number>(points.map(d => d.properties.dx + d.properties.r))\n  const minY = min<number>(points.map(d => d.properties.dy - d.properties.r))\n  const maxY = max<number>(points.map(d => d.properties.dy + d.properties.r))\n  return Math.sqrt((maxX - minX) ** 2 + (maxY - minY) ** 2) * 0.5\n}\n\nexport function getClustersAndPoints<D extends GenericDataRecord> (\n  clusterIndex: Supercluster<D>,\n  leafletMap: L.Map,\n  customBounds?: [number, number, number, number]\n): (ClusterFeature<LeafletMapClusterDatum<D>> | PointFeature<D>)[] {\n  const leafletBounds = leafletMap.getBounds()\n  const southWest = leafletBounds.getSouthWest()\n  const northEast = leafletBounds.getNorthEast()\n  const bounds = customBounds || [southWest.lng, southWest.lat, northEast.lng, northEast.lat]\n  const zoom = Math.round(leafletMap.getZoom())\n  const points = clusterIndex.getClusters(bounds, zoom) // as ClusterFeature<LeafletMapPointDatum<D>>[]\n\n  for (const p of points) {\n    const point = p as ClusterFeature<LeafletMapClusterDatum<D>>\n    const isCluster = point.properties.cluster\n    if (isCluster) {\n      point.properties.clusterIndex = clusterIndex\n      point.properties.clusterPoints = clusterIndex.getLeaves(point.properties.cluster_id, Infinity).map(d => d.properties)\n    }\n  }\n\n  return points as (ClusterFeature<LeafletMapClusterDatum<D>> | PointFeature<D>)[]\n}\n"],"names":[],"mappings":"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"}