{"version":3,"file":"types.js","sources":["../../../src/components/graph/types.ts"],"sourcesContent":["// Types\nimport { Position } from 'types/position'\nimport { GraphInputLink, GraphInputNode, GraphNodeCore, GraphLinkCore } from 'types/graph'\nimport { Spacing } from 'types/spacing'\n\nexport type GraphNode<\n  N extends GraphInputNode = GraphInputNode,\n  L extends GraphInputLink = GraphInputLink,\n> = GraphNodeCore<N, L> & {\n  x?: number;\n  y?: number;\n\n  _id?: number | string;\n  _index?: number;\n  _state?: {\n    isDragged?: boolean;\n    fx?: number;\n    fy?: number;\n    selected?: boolean;\n    greyout?: boolean;\n  };\n\n  _panels?: GraphPanel<N, L>[];\n  _isConnected?: boolean;\n}\n\nexport type GraphLink<\n  N extends GraphInputNode = GraphInputNode,\n  L extends GraphInputLink = GraphInputLink,\n> = GraphLinkCore<N, L> & {\n  id?: number | string;\n  source: number | string | GraphNode<N>;\n  target: number | string | GraphNode<N>;\n\n  _id?: number | string;\n  _direction?: number;\n  _index?: number;\n  _neighbours?: number;\n\n  _state?: {\n    flowAnimTime?: number;\n    hovered?: boolean;\n    selected?: boolean;\n    greyout?: boolean;\n  };\n}\n\nexport enum GraphLayoutType {\n  Circular = 'circular',\n  Concentric = 'concentric',\n  Parallel = 'parallel',\n  ParallelHorizontal = 'parallel horizontal',\n  Dagre = 'dagre',\n  Force = 'force',\n  Elk = 'elk',\n}\n\nexport type GraphCircleLabel = {\n  text: string;\n  textColor?: string | null;\n  color?: string | null;\n  cursor?: string | null;\n  fontSize?: string | null;\n  radius?: number;\n}\n\nexport enum GraphLinkStyle {\n  Dashed = 'dashed',\n  Solid = 'solid',\n}\n\nexport enum GraphLinkArrowStyle {\n  Single = 'single',\n  Double = 'double',\n}\n\nexport enum GraphNodeShape {\n  Circle = 'circle',\n  Square = 'square',\n  Hexagon = 'hexagon',\n  Triangle = 'triangle',\n}\n\nexport type GraphPanelConfig = {\n  /** Panel nodes references by unique ids */\n  nodes: (string|number)[];\n  /** Panel label */\n  label?: string;\n  /** Position of the label */\n  labelPosition?: Position.Top | Position.Bottom | string;\n  /** Color of the panel's border */\n  borderColor?: string;\n  /** Border width of the panel in pixels */\n  borderWidth?: number;\n  /** Inner padding */\n  padding?: number | Spacing;\n  /** Dashed outline showing that the panel is selected */\n  dashedOutline?: boolean;\n  /** Side icon symbol */\n  sideIconSymbol?: string;\n  /** Size of the icon as a CSS string. e.g.: `12pt` or `12px` */\n  sideIconFontSize?: string;\n  /** Color of the icon */\n  sideIconSymbolColor?: string;\n  /** Shape of the icon's background */\n  sideIconShape?: GraphNodeShape | string;\n  /** Size of the icon's background shape */\n  sideIconShapeSize?: number;\n  /** Stroke color of the icon's background shape */\n  sideIconShapeStroke?: string;\n  /** Cursor, when hovering over the icon */\n  sideIconCursor?: string;\n}\n\nexport type GraphPanel<\n  N extends GraphInputNode = GraphInputNode,\n  L extends GraphInputLink = GraphInputLink,\n> = GraphPanelConfig & {\n  _numNodes?: number;\n  _x?: number;\n  _y?: number;\n  _width?: number;\n  _height?: number;\n  _disabled?: boolean;\n  _padding?: Spacing;\n}\n\nexport type GraphNodeAnimationState = {\n  endAngle: number;\n  nodeIndex: number;\n  nodeSize?: number;\n  borderWidth?: number;\n}\n\nexport type GraphNodeAnimatedElement<T = SVGElement> = T & {\n  _animState: GraphNodeAnimationState;\n}\n\nexport type GraphForceLayoutSettings = {\n  /** Preferred Link Distance. Default: `60` */\n  linkDistance?: number;\n  /** Link Strength [0:1]. Default: `0.45` */\n  linkStrength?: number;\n  /** Charge Force (<0 repulsion, >0 attraction). Default: `-500` */\n  charge?: number;\n  /** X-centring force. Default: `0.15` */\n  forceXStrength?: number;\n  /** Y-centring force. Default: `0.25` */\n  forceYStrength?: number;\n}\n\nexport type GraphElkLayoutSettings = Record<string, string>\n"],"names":[],"mappings":"IA+CY,gBAQX;AARD,CAAA,UAAY,eAAe,EAAA;AACzB,IAAA,eAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACrB,IAAA,eAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzB,IAAA,eAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACrB,IAAA,eAAA,CAAA,oBAAA,CAAA,GAAA,qBAA0C,CAAA;AAC1C,IAAA,eAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,eAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,eAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;AACb,CAAC,EARW,eAAe,KAAf,eAAe,GAQ1B,EAAA,CAAA,CAAA,CAAA;IAWW,eAGX;AAHD,CAAA,UAAY,cAAc,EAAA;AACxB,IAAA,cAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,cAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACjB,CAAC,EAHW,cAAc,KAAd,cAAc,GAGzB,EAAA,CAAA,CAAA,CAAA;IAEW,oBAGX;AAHD,CAAA,UAAY,mBAAmB,EAAA;AAC7B,IAAA,mBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,mBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACnB,CAAC,EAHW,mBAAmB,KAAnB,mBAAmB,GAG9B,EAAA,CAAA,CAAA,CAAA;IAEW,eAKX;AALD,CAAA,UAAY,cAAc,EAAA;AACxB,IAAA,cAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,cAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,cAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,cAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACvB,CAAC,EALW,cAAc,KAAd,cAAc,GAKzB,EAAA,CAAA,CAAA;;;;"}