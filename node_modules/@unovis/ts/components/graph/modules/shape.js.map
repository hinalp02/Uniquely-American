{"version":3,"file":"shape.js","sources":["../../../../src/components/graph/modules/shape.ts"],"sourcesContent":["import { Selection, select } from 'd3-selection'\n\n// Types\nimport { NumericAccessor, StringAccessor } from 'types/accessor'\n\n// Utils\nimport { polygon } from 'utils/path'\nimport { getString } from 'utils/data'\n\n// Types\n\n// Local Types\nimport { GraphNodeShape } from '../types'\n\n// Helpers\nimport { getNodeSize } from './node/helper'\n\nexport function isCustomXml (shape: GraphNodeShape): boolean {\n  return /<[a-z][\\s\\S]*>/i.test(shape)\n}\n\nexport function appendShape<T> (\n  selection: Selection<SVGGElement, T, SVGGElement, unknown>,\n  shapeAccessor: StringAccessor<T>,\n  shapeSelector: string,\n  customShapeSelector: string,\n  index?: number,\n  insertSelector = ':last-child'\n): void {\n  selection.each((d, i, elements) => {\n    const element = select(elements[i])\n    const shape = getString(d, shapeAccessor, index) as GraphNodeShape\n\n    let shapeElement: Selection<SVGPathElement, unknown, null, undefined>\n    | Selection<SVGRectElement, unknown, null, undefined>\n    | Selection<SVGGElement, unknown, null, undefined>\n    | Selection<SVGCircleElement, unknown, null, undefined>\n    const isCustomXmlShape = isCustomXml(shape)\n    if (isCustomXmlShape) {\n      shapeElement = element.insert('g', insertSelector)\n        .html(shape)\n    } else {\n      switch (shape) {\n        case GraphNodeShape.Square:\n          shapeElement = element.insert('rect', insertSelector)\n            .attr('rx', 5)\n            .attr('ry', 5)\n          break\n        case GraphNodeShape.Hexagon:\n        case GraphNodeShape.Triangle:\n          shapeElement = element.insert('path', insertSelector)\n          break\n        case GraphNodeShape.Circle:\n        default:\n          shapeElement = element.insert('circle', insertSelector)\n      }\n    }\n\n    shapeElement.classed(customShapeSelector, isCustomXmlShape)\n    return shapeElement.attr('class', shapeSelector)\n  })\n}\n\nexport function updateShape<T> (\n  selection: Selection<SVGGElement, T, SVGGElement, unknown>,\n  shape: StringAccessor<T>,\n  size: NumericAccessor<T>,\n  index: number\n): void {\n  if (selection.size() === 0) return\n\n  const d: T = selection.datum()\n  const nodeSize = getNodeSize(d, size, index)\n  selection.filter('circle')\n    .attr('r', nodeSize / 2)\n\n  selection.filter('rect')\n    .attr('width', nodeSize)\n    .attr('height', nodeSize)\n    .attr('x', -nodeSize / 2)\n    .attr('y', -nodeSize / 2)\n\n  selection.filter('path')\n    .attr('d', () => {\n      let n: number\n      switch (getString(d, shape, index)) {\n        case GraphNodeShape.Square:\n          n = 4\n          break\n        case GraphNodeShape.Triangle:\n          n = 3\n          break\n        case GraphNodeShape.Hexagon:\n        default:\n          n = 6\n      }\n\n      return polygon(nodeSize, n)\n    })\n\n  selection.filter('g')\n    .filter(() => !isCustomXml(getString(d, shape, index) as GraphNodeShape))\n    .html(getString(d, shape, index))\n\n  selection.filter('g')\n    .each((d, i, elements) => {\n      const el = select(elements[i])\n      const bBox = el.node().getBBox()\n      el.attr('transform', `translate(${-bBox.width / 2},${-bBox.height / 2})`)\n    })\n}\n"],"names":[],"mappings":"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"}