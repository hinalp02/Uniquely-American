{"version":3,"file":"config.js","sources":["../../../src/components/donut/config.ts"],"sourcesContent":["// Core\nimport { ComponentConfigInterface, ComponentDefaultConfig } from 'core/component/config'\n\n// Types\nimport { ColorAccessor, NumericAccessor } from 'types/accessor'\n\nexport interface DonutConfigInterface<Datum> extends ComponentConfigInterface {\n  /** Accessor function for getting the unique data record id. Used for more persistent data updates. Default: `(d, i) => d.id ?? i` */\n  id?: ((d: Datum, i: number, ...any: unknown[]) => string | number);\n  /** Value accessor function. Default: `undefined` */\n  value: NumericAccessor<Datum>;\n  /** Diagram angle range. Default: `[0, 2 * Math.PI]` */\n  angleRange?: [number, number];\n  /** Pad angle. Default: `0` */\n  padAngle?: number;\n  /** Custom sort function. Default: `undefined` */\n  sortFunction?: (a: Datum, b: Datum) => number;\n  /** Corner Radius. Default: `0` */\n  cornerRadius?: number;\n  /** Color accessor function. Default: `undefined` */\n  color?: ColorAccessor<Datum>;\n  /** Explicitly set the donut outer radius. Default: `undefined` */\n  radius?: number;\n  /** Arc width in pixels. Set to `0` if you want to have a pie chart. Default: `20` */\n  arcWidth?: number;\n  /** Central label accessor function or text. Default: `undefined` */\n  centralLabel?: string;\n  /** Central sub-label accessor function or text. Default: `undefined` */\n  centralSubLabel?: string;\n  /** Enables wrapping for the sub-label. Default: `true` */\n  centralSubLabelWrap?: boolean;\n  /** When true, the component will display empty segments (the ones that have `0` values) as tiny slices.\n   * Default: `false`\n  */\n  showEmptySegments?: boolean;\n  /** Angular size for empty segments in radians. Default: `0.5 * Math.PI / 180` */\n  emptySegmentAngle?: number;\n  /** Show donut background. The color is configurable via\n   * the `--vis-donut-background-color` and `--vis-dark-donut-background-color` CSS variables.\n   * Default: `true`\n  */\n  showBackground?: boolean;\n  /** Background angle range. When undefined, the value will be taken from `angleRange`. Default: `undefined` */\n  backgroundAngleRange?: [number, number];\n}\n\nexport const DonutDefaultConfig: DonutConfigInterface<unknown> = {\n  ...ComponentDefaultConfig,\n  id: (d: unknown, i: number): string | number => (d as { id: string }).id ?? i,\n  value: undefined,\n  angleRange: [0, 2 * Math.PI],\n  padAngle: 0,\n  sortFunction: undefined,\n  cornerRadius: 0,\n  color: undefined,\n  radius: undefined,\n  arcWidth: 20,\n  centralLabel: undefined,\n  centralSubLabel: undefined,\n  centralSubLabelWrap: true,\n  showEmptySegments: false,\n  emptySegmentAngle: 0.5 * Math.PI / 180,\n  showBackground: true,\n  backgroundAngleRange: undefined,\n}\n"],"names":[],"mappings":";;AAAA;MA8Ca,kBAAkB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC1B,sBAAsB,CACzB,EAAA,EAAA,EAAE,EAAE,CAAC,CAAU,EAAE,CAAS,KAAsB,EAAA,IAAA,EAAA,CAAA,CAAA,OAAA,MAAC,CAAoB,CAAC,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,CAAA,EAAA,EAC7E,KAAK,EAAE,SAAS,EAChB,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,EAC5B,QAAQ,EAAE,CAAC,EACX,YAAY,EAAE,SAAS,EACvB,YAAY,EAAE,CAAC,EACf,KAAK,EAAE,SAAS,EAChB,MAAM,EAAE,SAAS,EACjB,QAAQ,EAAE,EAAE,EACZ,YAAY,EAAE,SAAS,EACvB,eAAe,EAAE,SAAS,EAC1B,mBAAmB,EAAE,IAAI,EACzB,iBAAiB,EAAE,KAAK,EACxB,iBAAiB,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EACtC,cAAc,EAAE,IAAI,EACpB,oBAAoB,EAAE,SAAS,EAAA;;;;"}