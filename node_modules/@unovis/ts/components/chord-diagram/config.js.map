{"version":3,"file":"config.js","sources":["../../../src/components/chord-diagram/config.ts"],"sourcesContent":["// Core\nimport { ComponentConfigInterface, ComponentDefaultConfig } from 'core/component/config'\n\n// Types\nimport { ColorAccessor, GenericAccessor, NumericAccessor, StringAccessor } from 'types/accessor'\n\n// Local Types\nimport { ChordInputLink, ChordInputNode, ChordLabelAlignment, ChordLinkDatum, ChordNodeDatum } from './types'\n\nexport interface ChordDiagramConfigInterface<N extends ChordInputNode, L extends ChordInputLink> extends ComponentConfigInterface {\n  /** Angular range of the diagram. Default: `[0, 2 * Math.PI]` */\n  angleRange?: [number, number];\n  /** Corner radius constant value or accessor function. Default: `2` */\n  cornerRadius?: NumericAccessor<ChordNodeDatum<N>>;\n  /** Node id or index to highlight. Overrides default hover behavior if supplied. Default: `undefined` */\n  highlightedNodeId?: number | string;\n  /** Link ids or index values to highlight. Overrides default hover behavior if supplied. Default: [] */\n  highlightedLinkIds?: (number | string)[];\n  /** Link color accessor function. Default: `var(--vis-chord-diagram-link-fill-color)` */\n  linkColor?: ColorAccessor<ChordLinkDatum<N, L>>;\n  /** Link value accessor function. Default: `l => l.value` */\n  linkValue?: NumericAccessor<ChordLinkDatum<N, L>>;\n  /** Array of node hierarchy levels. Data records are supposed to have corresponding properties, e.g. ['level1', 'level2']. Default: `[]` */\n  nodeLevels?: string[];\n  /** Node width in pixels. Default: `15` */\n  nodeWidth?: number;\n  /** Node color accessor function ot constant value. Default: `d => d.color` */\n  nodeColor?: ColorAccessor<ChordNodeDatum<N>>;\n  /** Node label accessor function. Default: `d => d.label ?? d.key` */\n  nodeLabel?: StringAccessor<ChordNodeDatum<N>>;\n  /** Node label color accessor function. Default: `undefined` */\n  nodeLabelColor?: StringAccessor<ChordNodeDatum<N>>;\n  /** Node label alignment. Default: `ChordLabelAlignment.Along` */\n  nodeLabelAlignment?: GenericAccessor<ChordLabelAlignment | string, ChordNodeDatum<N>>;\n  /** Pad angle in radians. Default: `0.02` */\n  padAngle?: number;\n  /** The exponent property of the radius scale. Default: `2` */\n  radiusScaleExponent?: number;\n}\n\nexport const ChordDiagramDefaultConfig: ChordDiagramConfigInterface<ChordInputNode, ChordInputLink> = {\n  ...ComponentDefaultConfig,\n  duration: 800,\n  highlightedNodeId: undefined,\n  highlightedLinkIds: [],\n  linkColor: undefined,\n  linkValue: (d: ChordInputNode): number => (d as { value: number }).value,\n  nodeLevels: [],\n  nodeWidth: 15,\n  nodeColor: (d: unknown): string => (d as { color: string }).color,\n  nodeLabel: (d: unknown): string => (d as { label: string }).label ?? (d as { key: string }).key,\n  nodeLabelColor: undefined,\n  nodeLabelAlignment: ChordLabelAlignment.Along,\n  padAngle: 0.02,\n  cornerRadius: 2,\n  angleRange: [0, 2 * Math.PI],\n  radiusScaleExponent: 2,\n}\n"],"names":[],"mappings":";;;AAAA;MAwCa,yBAAyB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACjC,sBAAsB,CACzB,EAAA,EAAA,QAAQ,EAAE,GAAG,EACb,iBAAiB,EAAE,SAAS,EAC5B,kBAAkB,EAAE,EAAE,EACtB,SAAS,EAAE,SAAS,EACpB,SAAS,EAAE,CAAC,CAAiB,KAAc,CAAuB,CAAC,KAAK,EACxE,UAAU,EAAE,EAAE,EACd,SAAS,EAAE,EAAE,EACb,SAAS,EAAE,CAAC,CAAU,KAAc,CAAuB,CAAC,KAAK,EACjE,SAAS,EAAE,CAAC,CAAU,eAAa,OAAA,CAAA,EAAA,GAAC,CAAuB,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAK,CAAqB,CAAC,GAAG,CAAA,EAAA,EAC/F,cAAc,EAAE,SAAS,EACzB,kBAAkB,EAAE,mBAAmB,CAAC,KAAK,EAC7C,QAAQ,EAAE,IAAI,EACd,YAAY,EAAE,CAAC,EACf,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,EAC5B,mBAAmB,EAAE,CAAC,EAAA;;;;"}