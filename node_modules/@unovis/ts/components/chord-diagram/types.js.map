{"version":3,"file":"types.js","sources":["../../../src/components/chord-diagram/types.ts"],"sourcesContent":["import { HierarchyRectangularNode } from 'd3-hierarchy'\nimport { GraphLinkCore, GraphNodeCore } from 'types'\n\n// Node data flow in the component:\n// Input data (N extends ChordInputNode, L extends ChordInputLink)\n//   => GraphNodeCore<N>[] (we reference it only in a few places when it's needed, to make the code easier to read)\n//   => ChordHierarchyNode (nested object representing node hierarchy)\n//   => ChordNode[] and ChordLeafNode[] (HierarchyRectangularNode[] from D3 partition)\n\nexport interface ChordInputNode {\n  id?: string;\n}\n\nexport interface ChordInputLink {\n  id?: string;\n  source: number | string | ChordInputNode;\n  target: number | string | ChordInputNode;\n}\n\nexport type ChordDiagramData<\n  N extends ChordInputNode,\n  L extends ChordInputLink,\n> = {\n  nodes: N[];\n  links?: L[];\n}\n\nexport interface ChordHierarchyNode<N> {\n  key: string;\n  values: (ChordHierarchyNode<N> | N)[];\n  depth?: number;\n  height?: number;\n  value?: number;\n  ancestors?: string[];\n}\n\nexport type ChordNodeState = {\n  _state: {\n    hovered?: boolean;\n    value?: number;\n  };\n  _prevX1?: number;\n}\n\nexport type ChordNodeCore<N> = HierarchyRectangularNode<N> & ChordNodeState & {\n  data: GraphNodeCore<N, ChordInputLink>;\n  uid: string; // Unique id for textPath href\n}\n\nexport type ChordNodeDatum<N> = ChordHierarchyNode<N> | N\nexport type ChordLinkDatum<N extends ChordInputNode, L extends ChordInputLink = ChordInputLink> = GraphLinkCore<N, L>;\n\nexport type ChordNode<N extends ChordInputNode> = ChordNodeCore<ChordNodeDatum<N>>\nexport type ChordLeafNode<N extends ChordInputNode> = ChordNodeCore<N>\n\nexport type ChordRibbonPoint = { a0: number; a1: number; r: number }\nexport interface ChordRibbon<N extends ChordInputNode, L extends ChordInputLink = ChordInputLink> {\n  source: ChordLeafNode<N>;\n  target: ChordLeafNode<N>;\n  points: ChordRibbonPoint[];\n  data: ChordLinkDatum<N, L>;\n  _state: {\n    hovered?: boolean;\n  };\n}\n\nexport enum ChordLabelAlignment {\n  Along = 'along',\n  Perpendicular = 'perpendicular',\n}\n"],"names":[],"mappings":"IAkEY,oBAGX;AAHD,CAAA,UAAY,mBAAmB,EAAA;AAC7B,IAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,mBAAA,CAAA,eAAA,CAAA,GAAA,eAA+B,CAAA;AACjC,CAAC,EAHW,mBAAmB,KAAnB,mBAAmB,GAG9B,EAAA,CAAA,CAAA;;;;"}