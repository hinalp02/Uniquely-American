{"version":3,"file":"types.js","sources":["../../../src/components/topojson-map/types.ts"],"sourcesContent":["import { Feature, Geometry } from 'geojson'\nimport {\n  GeoProjection,\n  geoMercator,\n  geoEquirectangular,\n  geoAzimuthalEqualArea,\n  geoAzimuthalEquidistant,\n  geoGnomonic,\n  geoOrthographic,\n  geoStereographic,\n  geoEqualEarth,\n  geoAlbersUsa,\n  geoAlbers,\n  geoConicConformal,\n  geoConicEqualArea,\n  geoConicEquidistant,\n  geoTransverseMercator,\n  geoNaturalEarth1,\n} from 'd3-geo'\n\nimport {\n  geoBromley,\n  geoNaturalEarth2,\n  geoKavrayskiy7,\n  geoHufnagel,\n  geoFoucautSinusoidal,\n  geoFahey,\n  geoEckert1,\n  geoEckert3,\n  geoBoggs,\n  geoCylindricalStereographic,\n  geoCraster,\n  geoBaker,\n  geoArmadillo,\n  geoAitoff,\n  geoRobinson,\n} from 'd3-geo-projection'\n\nexport type MapData<AreaDatum, PointDatum = unknown, LinkDatum = unknown> = {\n  areas?: AreaDatum[];\n  points?: PointDatum[];\n  links?: LinkDatum[] ;\n}\n\nexport enum MapPointLabelPosition {\n  Center = 'center',\n  Bottom = 'bottom',\n}\n\nexport type MapFeature<D> = Feature<Geometry> & { data: D }\n\nexport enum MapProjectionKind {\n  // Projections form `d3-geo`\n  Mercator = 'Mercator',\n  Equirectangular = 'Equirectangular',\n  AzimuthalEqualArea = 'AzimuthalEqualArea',\n  AzimuthalEquidistant = 'AzimuthalEquidistant',\n  Gnomonic = 'Gnomonic',\n  Orthographic = 'Orthographic',\n  Stereographic = 'Stereographic',\n  EqualEarth = 'EqualEarth',\n  AlbersUsa = 'AlbersUsa',\n  Albers = 'Albers',\n  ConicConformal = 'ConicConformal',\n  ConicEqualArea = 'ConicEqualArea',\n  ConicEquidistant = 'ConicEquidistant',\n  TransverseMercator = 'TransverseMercator',\n  NaturalEarth1 = 'NaturalEarth1',\n\n  // Projections form `d3-geo-projection`\n  Bromley = 'Bromley',\n  NaturalEarth2 = 'NaturalEarth2',\n  Kavrayskiy7 = 'Kavrayskiy7',\n  Hufnagel = 'Hufnagel',\n  FoucautSinusoidal = 'FoucautSinusoidal',\n  Eckert1 = 'Eckert1',\n  Eckert3 = 'Eckert3',\n  Boggs = 'Boggs',\n  CylindricalStereographic = 'CylindricalStereographic',\n  Craster = 'Craster',\n  Baker = 'Baker',\n  Armadillo = 'Armadillo',\n  Aitoff = 'Aitoff',\n  Fahey = 'Fahey',\n  Robinson = 'Robinson',\n}\n\nexport const MapProjection = {\n  // Projections form `d3-geo`\n  [MapProjectionKind.Mercator]: geoMercator,\n  [MapProjectionKind.Equirectangular]: geoEquirectangular,\n  [MapProjectionKind.AzimuthalEqualArea]: geoAzimuthalEqualArea,\n  [MapProjectionKind.AzimuthalEquidistant]: geoAzimuthalEquidistant,\n  [MapProjectionKind.Gnomonic]: geoGnomonic,\n  [MapProjectionKind.Orthographic]: geoOrthographic,\n  [MapProjectionKind.Stereographic]: geoStereographic,\n  [MapProjectionKind.EqualEarth]: geoEqualEarth,\n  [MapProjectionKind.AlbersUsa]: geoAlbersUsa,\n  [MapProjectionKind.Albers]: geoAlbers,\n  [MapProjectionKind.ConicConformal]: geoConicConformal,\n  [MapProjectionKind.ConicEqualArea]: geoConicEqualArea,\n  [MapProjectionKind.ConicEquidistant]: geoConicEquidistant,\n  [MapProjectionKind.TransverseMercator]: geoTransverseMercator,\n  [MapProjectionKind.NaturalEarth1]: geoNaturalEarth1,\n\n  // Projections form `d3-geo-projection`\n  [MapProjectionKind.Bromley]: geoBromley as () => GeoProjection,\n  [MapProjectionKind.NaturalEarth2]: geoNaturalEarth2 as () => GeoProjection,\n  [MapProjectionKind.Kavrayskiy7]: geoKavrayskiy7 as () => GeoProjection,\n  [MapProjectionKind.Hufnagel]: geoHufnagel as () => GeoProjection,\n  [MapProjectionKind.FoucautSinusoidal]: geoFoucautSinusoidal as () => GeoProjection,\n  [MapProjectionKind.Eckert1]: geoEckert1 as () => GeoProjection,\n  [MapProjectionKind.Eckert3]: geoEckert3 as () => GeoProjection,\n  [MapProjectionKind.Boggs]: geoBoggs as () => GeoProjection,\n  [MapProjectionKind.CylindricalStereographic]: geoCylindricalStereographic as () => GeoProjection,\n  [MapProjectionKind.Craster]: geoCraster as () => GeoProjection,\n  [MapProjectionKind.Baker]: geoBaker as () => GeoProjection,\n  [MapProjectionKind.Armadillo]: geoArmadillo as () => GeoProjection,\n  [MapProjectionKind.Aitoff]: geoAitoff as () => GeoProjection,\n  [MapProjectionKind.Fahey]: geoFahey as () => GeoProjection,\n  [MapProjectionKind.Robinson]: geoRobinson as () => GeoProjection,\n}\n\n"],"names":[],"mappings":"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"}