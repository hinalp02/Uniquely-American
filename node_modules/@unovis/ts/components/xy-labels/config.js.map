{"version":3,"file":"config.js","sources":["../../../src/components/xy-labels/config.ts"],"sourcesContent":["// Core\nimport { XYComponentConfigInterface, XYComponentDefaultConfig } from 'core/xy-component/config'\n\n// Types\nimport { ColorAccessor, GenericAccessor, NumericAccessor, StringAccessor } from 'types/accessor'\n\n// Local Types\nimport { XYLabel, XYLabelPositioning } from './types'\n\nexport interface XYLabelsConfigInterface<Datum> extends XYComponentConfigInterface<Datum> {\n  /** Label color accessor function. Default: `d => d.color` */\n  color?: ColorAccessor<Datum>;\n  /** Single Y accessor function. Default: `undefined` */\n  y: NumericAccessor<Datum>;\n  /** Defines how to position the label horizontally: in data space or in screen space. Default: `XYLabelPositioning.DataSpace` */\n  xPositioning?: GenericAccessor<XYLabelPositioning | string, Datum>;\n  /** Defines how to position the label vertically: in data space or in screen space. Default: `XYLabelPositioning.DataSpace` */\n  yPositioning?: GenericAccessor<XYLabelPositioning | string, Datum>;\n  /** Font size accessor function or constant value in pixels. If not provided, the value of CSS variable `--vis-xy-label-font-size` will be used. Default: `undefined` */\n  labelFontSize?: NumericAccessor<Datum>;\n  /** Label accessor function or string. Default: `undefined` */\n  label?: StringAccessor<Datum>;\n  /** Label color. Default: `undefined` */\n  backgroundColor?: ColorAccessor<Datum>;\n  /** Optional label cursor. Default: `null` */\n  cursor?: StringAccessor<Datum>;\n  /** Label color brightness ratio for switching between dark and light text label color. Default: `0.65` */\n  labelTextBrightnessRatio?: number;\n  /** Enable label clustering. Default: `true` */\n  clustering?: boolean;\n  /** Label accessor for clusters. Default: `undefined` */\n  clusterLabel?: StringAccessor<XYLabel<Datum>[]>;\n  /** Font size accessor for clusters, the value is in pixels. If not provided, the value of CSS variable `--vis-xy-label-cluster-font-size` will be used. Default: `undefined` */\n  clusterFontSize?: NumericAccessor<XYLabel<Datum>[]>;\n  /** Background color accessor for clusters. Default: `undefined` */\n  clusterBackgroundColor?: ColorAccessor<XYLabel<Datum>[]>;\n  /** Optional cluster cursor. Default: `null` */\n  clusterCursor?: StringAccessor<XYLabel<Datum>[]>;\n  /** Cluster label color accessor function. Default: `null` */\n  clusterLabelColor?: ColorAccessor<XYLabel<Datum>[]>;\n}\nexport const XYLabelsDefaultConfig: XYLabelsConfigInterface<unknown> = {\n  ...XYComponentDefaultConfig,\n  color: (d: unknown): string => (d as { color: string }).color,\n  y: undefined,\n  xPositioning: XYLabelPositioning.DataSpace,\n  yPositioning: XYLabelPositioning.DataSpace,\n  labelFontSize: undefined,\n  label: undefined,\n  backgroundColor: undefined,\n  cursor: null,\n  labelTextBrightnessRatio: 0.65,\n\n  clustering: true,\n  clusterLabel: <Datum>(records: XYLabel<Datum>[]): string => records.length.toString(),\n  clusterFontSize: undefined,\n  clusterBackgroundColor: undefined,\n  clusterCursor: undefined,\n  clusterLabelColor: null,\n}\n\n"],"names":[],"mappings":";;;AAAA;AAyCa,MAAA,qBAAqB,mCAC7B,wBAAwB,CAAA,EAAA,EAC3B,KAAK,EAAE,CAAC,CAAU,KAAc,CAAuB,CAAC,KAAK,EAC7D,CAAC,EAAE,SAAS,EACZ,YAAY,EAAE,kBAAkB,CAAC,SAAS,EAC1C,YAAY,EAAE,kBAAkB,CAAC,SAAS,EAC1C,aAAa,EAAE,SAAS,EACxB,KAAK,EAAE,SAAS,EAChB,eAAe,EAAE,SAAS,EAC1B,MAAM,EAAE,IAAI,EACZ,wBAAwB,EAAE,IAAI,EAE9B,UAAU,EAAE,IAAI,EAChB,YAAY,EAAE,CAAQ,OAAyB,KAAa,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EACrF,eAAe,EAAE,SAAS,EAC1B,sBAAsB,EAAE,SAAS,EACjC,aAAa,EAAE,SAAS,EACxB,iBAAiB,EAAE,IAAI;;;;"}