{"version":3,"file":"index.js","sources":["../../../src/components/xy-labels/index.ts"],"sourcesContent":["// Core\nimport { XYComponentCore } from 'core/xy-component'\n\n// Utils\nimport { getValue, isNumber, isNumberWithinRange } from 'utils/data'\nimport { rectIntersect } from 'utils/misc'\n\n// Local Types\nimport { XYLabelCluster, XYLabel, XYLabelPositioning } from './types'\n\n// Config\nimport { XYLabelsDefaultConfig, XYLabelsConfigInterface } from './config'\n\n// Modules\nimport { createLabels, updateLabels, removeLabels, getLabelRenderProps } from './modules/label'\n\n// Styles\nimport * as s from './style'\n\nexport class XYLabels<Datum> extends XYComponentCore<Datum, XYLabelsConfigInterface<Datum>> {\n  static selectors = s\n  clippable = false\n  protected _defaultConfig = XYLabelsDefaultConfig as XYLabelsConfigInterface<Datum>\n  public config: XYLabelsConfigInterface<Datum> = this._defaultConfig\n\n  events = {\n    [XYLabels.selectors.label]: {},\n  }\n\n  constructor (config?: XYLabelsConfigInterface<Datum>) {\n    super()\n    if (config) this.setConfig(config)\n  }\n\n  _render (customDuration?: number): void {\n    const { config } = this\n    const duration = isNumber(customDuration) ? customDuration : config.duration\n\n    const labelGroups = this.g\n      .selectAll<SVGGElement, XYLabel<Datum> | XYLabelCluster<Datum>>(`.${s.labelGroup}`)\n      .data(this._getDataToRender())\n\n    const labelGroupsExit = labelGroups.exit<XYLabel<Datum> | XYLabelCluster<Datum>>()\n    removeLabels(labelGroupsExit, duration)\n\n    const labelGroupsEnter = labelGroups.enter().append('g')\n      .attr('class', s.labelGroup)\n      .call(createLabels)\n\n    const labelGroupsMerged = labelGroupsEnter\n      .merge(labelGroups)\n      .classed(s.cluster, d => !!(d as XYLabelCluster<Datum>).records)\n      .classed(s.label, d => !(d as XYLabelCluster<Datum>).records)\n\n    labelGroupsMerged.call(updateLabels, config, duration)\n  }\n\n  private _getDataToRender (): (XYLabel<Datum> | XYLabelCluster<Datum>)[] {\n    const { config, datamodel } = this\n\n    const xRange = this.xScale.range() as [number, number]\n    const yRange = this.xScale.range() as [number, number]\n\n    const labels = datamodel.data?.reduce<XYLabel<Datum>[]>((acc, d) => {\n      const xPositioning = getValue<Datum, XYLabelPositioning>(d, config.xPositioning)\n      const yPositioning = getValue<Datum, XYLabelPositioning>(d, config.yPositioning)\n      const props = getLabelRenderProps(d, this.element, config, this.xScale, this.yScale)\n\n      if (\n        ((xPositioning !== XYLabelPositioning.DataSpace) || isNumberWithinRange(props.x, xRange)) &&\n        ((yPositioning !== XYLabelPositioning.DataSpace) || isNumberWithinRange(props.y, yRange))\n      ) {\n        acc.push({ ...d, _screen: props })\n      }\n\n      return acc\n    }, []) ?? []\n\n    return this._getClusteredLabels(labels)\n  }\n\n  private _getClusteredLabels (labels: XYLabel<Datum>[]): (XYLabel<Datum> | XYLabelCluster<Datum>)[] {\n    const labelsNonOverlapping = [...labels]\n    const clusterMap = new Map<XYLabel<Datum>, XYLabel<Datum>[]>()\n    for (let i = 0; i < labelsNonOverlapping.length; i += 1) {\n      const label1 = labelsNonOverlapping[i]\n      for (let j = i + 1; j < labelsNonOverlapping.length; j += 1) {\n        const label2 = labelsNonOverlapping[j]\n        const isIntersecting = rectIntersect(label1._screen, label2._screen)\n        if (isIntersecting) {\n          if (!clusterMap.has(label1)) clusterMap.set(label1, [label1])\n          clusterMap.get(label1).push(label2)\n          labelsNonOverlapping.splice(j, 1)\n          j -= 1\n        }\n      }\n\n      if (clusterMap.has(label1)) {\n        labelsNonOverlapping.splice(i, 1)\n        i -= 1\n      }\n    }\n\n    const clusters = Array.from(clusterMap.values()).map(records => ({\n      _screen: getLabelRenderProps(records, this.element, this.config, this.xScale, this.yScale),\n      records,\n    }))\n\n    return [...labelsNonOverlapping, ...clusters]\n  }\n}\n"],"names":["s.labelGroup","s.cluster","s.label","s"],"mappings":"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"}