{"version":3,"file":"config.js","sources":["../../../src/core/xy-component/config.ts"],"sourcesContent":["import { ContinuousScale } from 'types/scale'\n\n// Types\nimport { ColorAccessor, NumericAccessor } from 'types/accessor'\n\n// Config\nimport { ComponentDefaultConfig, ComponentConfigInterface } from '../component/config'\n\nexport interface XYComponentConfigInterface<Datum> extends ComponentConfigInterface {\n  /** Accessor function for getting the values along the X axis. Default: `undefined` */\n  x: NumericAccessor<Datum>;\n  /** A single of multiple accessor functions for getting the values along the Y axis. Default: `undefined` */\n  y: NumericAccessor<Datum> | NumericAccessor<Datum>[];\n  /** Accessor function for getting the unique data record id. Used for more persistent data updates. Default: `(d, i) => d.id ?? i` */\n  id?: ((d: Datum, i: number, ...any: any[]) => string);\n  /** Component color accessor function. Default: `d => d.color` */\n  color?: ColorAccessor<Datum> | ColorAccessor<Datum[]>;\n  /** Scale for X dimension, e.g. Scale.scaleLinear(). If you set xScale you'll be responsible for setting it's `domain` and `range` as well.\n   * Only continuous scales are supported.\n   * Default: `undefined`\n  */\n  xScale?: ContinuousScale;\n  /** Scale for Y dimension, e.g. Scale.scaleLinear(). If you set yScale you'll be responsible for setting it's `domain` and `range` as well.\n   * Only continuous scales are supported.\n   * Default: `undefined`\n  */\n  yScale?: ContinuousScale;\n  /** Identifies whether the component should be excluded from overall X and Y domain calculations or not.\n   * This property can be useful when you want pass individual data to a component and you don't want it to affect\n   * the scales of the chart.\n   * Default: `false`\n  */\n  excludeFromDomainCalculation?: boolean;\n}\n\nexport const XYComponentDefaultConfig: XYComponentConfigInterface<unknown> = {\n  ...ComponentDefaultConfig,\n  x: undefined,\n  y: undefined,\n  id: (d: unknown, i: number): string => (d as { id: string }).id ?? `${i}`,\n  color: (d: unknown | unknown[]): string => (d as { color: string }).color,\n  xScale: undefined,\n  yScale: undefined,\n  excludeFromDomainCalculation: false,\n}\n"],"names":[],"mappings":";;AAKA;AA8Ba,MAAA,wBAAwB,GAChC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,sBAAsB,CACzB,EAAA,EAAA,CAAC,EAAE,SAAS,EACZ,CAAC,EAAE,SAAS,EACZ,EAAE,EAAE,CAAC,CAAU,EAAE,CAAS,KAAY,EAAA,IAAA,EAAA,CAAA,CAAC,OAAA,CAAA,EAAA,GAAC,CAAoB,CAAC,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,GAAG,CAAC,CAAA,CAAE,CAAA,EAAA,EACzE,KAAK,EAAE,CAAC,CAAsB,KAAc,CAAuB,CAAC,KAAK,EACzE,MAAM,EAAE,SAAS,EACjB,MAAM,EAAE,SAAS,EACjB,4BAA4B,EAAE,KAAK,EAAA;;;;"}